<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>farwmarth</title>
  
  <subtitle>Those that can,do.Those that can&#39;t ,complain</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.farwmarth.com/"/>
  <updated>2018-12-18T12:53:28.931Z</updated>
  <id>http://www.farwmarth.com/</id>
  
  <author>
    <name>farwmarth</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反编下某疫苗接种app</title>
    <link href="http://www.farwmarth.com/umiao/"/>
    <id>http://www.farwmarth.com/umiao/</id>
    <published>2018-12-18T10:26:16.000Z</published>
    <updated>2018-12-18T12:53:28.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天带小孩去打疫苗，发现之前的社区医院改成app预约了,下载app用了一下,真是无力吐槽,除了注册功能是好的。其他功能一点开全在转圏加载,预约教程页面还报了个sql语句错误.报着学习的态度想看看大佬们写的代码.</p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ul><li><a href="https://www.yeshen.com/" target="_blank" rel="noopener">夜神模拟器</a></li><li><a href="https://www.coolapk.com/apk/app.greyshirts.sslcapture" target="_blank" rel="noopener">Packet Capture</a></li><li><a href="https://github.com/android-hacker/VirtualXposed" target="_blank" rel="noopener">VirtuanXposed</a></li><li><a href="https://www.coolapk.com/apk/bin.mt.plus" target="_blank" rel="noopener">mt文件管理器2</a></li><li><a href="https://bbs.pediy.com/thread-224105.htm" target="_blank" rel="noopener">FDex2</a></li><li><a href="http://www.gda.wiki:9090/" target="_blank" rel="noopener">gda</a></li><li><a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="noopener">dex2jar</a></li><li><a href="https://github.com/java-decompiler/jd-gui" target="_blank" rel="noopener">jd-gui</a></li></ul><h1 id="撸起袖子"><a href="#撸起袖子" class="headerlink" title="撸起袖子"></a>撸起袖子</h1><p>用<code>packet capture</code>抓了几个包看了下api。<br><img src="http://farwmarth.bestnewbee.com/umiao/20181218082458193.png" alt=""></p><p>基础api地址: <a href="http://api.new.umiaohealth.com" target="_blank" rel="noopener">http://api.new.umiaohealth.com</a></p><ul><li>登录 <code>/account/login</code></li><li>找可预约记录 <code>/vaccine/getreservationreservedlist</code></li><li>接种信息 <code>/vaccine/getvaccinemain</code></li></ul><p>模拟登录时有个token字段猜解死活不通过,看来只能反编译下app看下加密代码了.<br>用gda查了下壳,发现是360加固的.<br><img src="http://farwmarth.bestnewbee.com/umiao/20181218083021813.png" alt=""><br>用gda自带的进程dump连接模拟器老是进程无响应,无果。<br><img src="http://farwmarth.bestnewbee.com/umiao/20181218083206075.png" alt=""><br>祭出这个xposed脱壳模块<code>FDex2</code>(要先安装VirtuanXposed或者xposed).<br><img src="http://farwmarth.bestnewbee.com/umiao/20181218083521418.png" alt=""><br>用mt文件管理器把dump出的dex移动到夜神模拟器和pc的共享目录.<br><img src="http://farwmarth.bestnewbee.com/20181218185132630/20181218065227095.png" alt="dex"><br>这里有多上dex,可以用gda打开看下主代码在哪个dex里.然后用dex2jar转换一下把dex转成jar<br><img src="http://farwmarth.bestnewbee.com/umiao/20181218084106540.png" alt=""><br>然后用jd-gui打开jar反编一下.class文件就行了。</p><p>最后找到了加密token的关键代码<br>HttpClientUtil.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">httpPost</span><span class="params">(Context paramContext, String paramString, AjaxParams paramAjaxParams, BaseParser&lt;?&gt; paramBaseParser, IDataCallback paramIDataCallback)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    FinalHttp localFinalHttp = <span class="keyword">new</span> FinalHttp();</span><br><span class="line">    localFinalHttp.configTimeout(<span class="number">30000</span>);</span><br><span class="line">    paramAjaxParams.put(<span class="string">"token"</span>, Base64Utils.getSecretToken(paramContext));</span><br><span class="line">    Header[] arrayOfHeader = Base64Utils.getHttpHeader(paramContext);</span><br><span class="line">    String str1 = ((ParentInfo)ParentInfo.findFirst(ParentInfo.class)).getPid();</span><br><span class="line">    String str2 = str1;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(str1)) &#123;</span><br><span class="line">      str2 = <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    paramAjaxParams.put(<span class="string">"pid"</span>, str2);</span><br><span class="line">    paramAjaxParams.put(<span class="string">"VersionChecked"</span>, CommonUtil.getAppCurrentVersion(paramContext));</span><br><span class="line">    paramAjaxParams.put(<span class="string">"devicetype"</span>, <span class="string">"android"</span>);</span><br><span class="line">    localFinalHttp.post(paramString, arrayOfHeader, paramAjaxParams, <span class="string">"application/x-www-form-urlencoded"</span>, <span class="keyword">new</span> HttpClientUtil.3(<span class="keyword">this</span>, paramIDataCallback, paramString, paramAjaxParams, paramBaseParser, paramContext));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>Base64Utils.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSecretToken</span><span class="params">(Context paramContext)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  paramContext = (ParentInfo)ParentInfo.findFirst(ParentInfo.class);</span><br><span class="line">  String str = paramContext.getToken();</span><br><span class="line">  Object localObject = paramContext.getPid();</span><br><span class="line">  paramContext = (Context)localObject;</span><br><span class="line">  <span class="keyword">if</span> (TextUtils.isEmpty((CharSequence)localObject)) &#123;</span><br><span class="line">    paramContext = <span class="string">"0"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  tktimes = System.currentTimeMillis() + <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">int</span> i = Integer.parseInt(tktimes.substring(<span class="number">12</span>));</span><br><span class="line">  localObject = sortSeed[i];</span><br><span class="line">  sortIndex = String.valueOf(localObject[<span class="number">0</span>]) + String.valueOf(localObject[<span class="number">1</span>]) + String.valueOf(localObject[<span class="number">2</span>]);</span><br><span class="line">  localObject = getSortData(localObject[<span class="number">0</span>], str, paramContext, tktimes) + <span class="string">","</span> + getSortData(localObject[<span class="number">1</span>], str, paramContext, tktimes) + <span class="string">","</span> + getSortData(localObject[<span class="number">2</span>], str, paramContext, tktimes) + <span class="string">","</span> + sortIndex;</span><br><span class="line">  paramContext = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    localObject = encrypt((String)localObject, <span class="string">"xxx加密"</span>);</span><br><span class="line">    paramContext = (Context)localObject;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception localException)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">      localException.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> paramContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好了，我去写个预约疫苗的脚本去了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天带小孩去打疫苗，发现之前的社区医院改成app预约了,下载app用了一下,真是无力吐槽,除了注册功能是好的。其他功能一点开全在转圏加载,预
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo自动化构建</title>
    <link href="http://www.farwmarth.com/autohexo/"/>
    <id>http://www.farwmarth.com/autohexo/</id>
    <published>2017-03-12T15:21:00.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现博客的图片和文章数量增长后,hexo生成和发布的时间越来越长,而且换了电脑后hexo的环境又要倒腾一遍,实在是消耗时间。</p><p>但是又不想换简书这种单纯的写作平台，毕竟博客还是需要一点个性化的元素。</p><p>那能不能我写完markdown然后commit之后就可以自动生成静态页面自动发布呢？当然懒人们有很多种办法。研究了一下一般都是用<code>webhook</code>来实现,目前大概有几种方式:</p><a id="more"></a><p>hexo源文章仓库托管在github上然后编成静态文件分发到github和coding.net的pages服务上。一般用<code>Travis CI</code>来做集成,转一张<a href="http://kchen.cc/2016/11/12/hexo-instructions/#Travis-CI-持续集成" target="_blank" rel="noopener">kcen</a>做的时序图<br><img src="http://farwmarth.bestnewbee.com/images/uploads/2017/03/travis_github.jpg" alt="travis_github.jpg"><br>流程简化就是本地push源文章到github，触发webhook然后traivs帮你自动构建生成静态文件然后推送到page服务上。</p><p>为了追求速度,我把hexo文章仓库托管在coding.net的上,而且coding的私有项目不收费,也提供了webhook的功能.</p><p>在coding上也有像travis一样的国内服务,开始收费的<code>flow.ci</code>不予考虑, 看到<a href="http://janrone.com/2016/05/10/%E5%88%A9%E7%94%A8Daocloud%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo/" target="_blank" rel="noopener">这篇</a>博客<a href="https://www.daocloud.io/" target="_blank" rel="noopener">daocloud</a>好像是个不错的选择，但是在部署的时候还是要暴露私钥给第三方平台,也没有选择这种方案。</p><p>正好手上有一台闲置的vps,就选择了云主机上搭建一个hexo的环境,push的时候触发coding的webhook，回调云主机上用nginx反代的node服务，然后执行一个<code>shell</code>脚本拉代码自动编译发布<br><img src="http://farwmarth.bestnewbee.com/images/uploads/2017/03/vps_coding_webhook.png" alt="travis_github.jpg"></p><p>基本流程没有变,只是把第三方的服务换成了自己的vps,把需要的密钥换成了部署公钥。</p><p>coding的部署公钥在此部署<br><img src="http://farwmarth.bestnewbee.com/images/uploads/2017/03/codingkey.png" alt="travis_github.jpg"></p><p>webhook在此配置<br><img src="http://farwmarth.bestnewbee.com/images/uploads/2017/03/webhook.png" alt="travis_github.jpg"></p><p>vps上的项目目录，hexo是clone下来的博客源码，webhook下的是<code>node server</code>,部署公钥放最顶层</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">├── blog_rsa</span><br><span class="line">├── blog_rsa.pub #部署公钥</span><br><span class="line">├── hexo    #博客源码</span><br><span class="line">│   ├── deploy.sh</span><br><span class="line">│   ├── source</span><br><span class="line">└── webhook # node服务</span><br><span class="line">    ├── config.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── logs</span><br></pre></td></tr></table></figure><p>因为部署公钥没有放<code>.ssh</code>目录下所以要在<code>~/.ssh/config</code>下指定一下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host git.coding.net</span><br><span class="line">User xxx@email.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile    /data/publish/blog_rsa</span><br><span class="line">IdentitiesOnly  yes</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">User xxx@email.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile    /data/publish/blog_rsa</span><br><span class="line">IdentitiesOnly  yes</span><br></pre></td></tr></table></figure><p>node服务代码很简单,判定一下coding的hook是不是push请求,友情提示,启动node服务的时候可以用<a href="https://www.npmjs.com/package/forever" target="_blank" rel="noopener">forever</a>模块启动<code>forever start index.js</code><br><code>index.js</code></p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config.js'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">var</span> log4js = <span class="built_in">require</span>(<span class="string">'log4js'</span>);</span><br><span class="line"><span class="keyword">var</span> logger = log4js.getLogger(<span class="string">"hook"</span>);</span><br><span class="line"></span><br><span class="line">log4js.configure(&#123;</span><br><span class="line">    appenders: [&#123;</span><br><span class="line">        type: <span class="string">'console'</span>,</span><br><span class="line">        level: <span class="string">'DEBUG'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        type: <span class="string">'file'</span>,</span><br><span class="line">        filename: <span class="string">'logs/hook.log'</span>,</span><br><span class="line">        category: <span class="string">'hook'</span>,</span><br><span class="line">        level: <span class="string">'INFO'</span>,</span><br><span class="line">        maxLogSize: <span class="number">20480</span>,</span><br><span class="line">        backups: <span class="number">10</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleDateString() + <span class="string">" "</span> + nowDate.toLocaleTimeString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> main = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data.commits) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.token , config.token);</span><br><span class="line">        <span class="keyword">if</span> (data.token != config.token)&#123;</span><br><span class="line">            logger.error(<span class="string">"error token!!!!!!!"</span>);</span><br><span class="line">            res.end();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> project_name = data.repository.name,</span><br><span class="line">            commit_user = data.commits[<span class="number">0</span>].committer.name,</span><br><span class="line">            commit_user_email = data.commits[<span class="number">0</span>].committer.email,</span><br><span class="line">            commit_message = data.commits[<span class="number">0</span>].short_message;</span><br><span class="line">        <span class="keyword">let</span> pro_item = config.projects[project_name];</span><br><span class="line">        <span class="keyword">if</span> (!pro_item) &#123;</span><br><span class="line">            logger.warn(<span class="string">"push project not in config"</span>);</span><br><span class="line">            res.end();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(util.format(<span class="string">"commit_message:%s, project_name:%s, commit_user:%s, commit_user_email:%s"</span>, commit_message, project_name, commit_user, commit_user_email));</span><br><span class="line">        exec(util.format(<span class="string">"sh %s"</span>, config.projects.shell_name), &#123;</span><br><span class="line">            maxBuffer: <span class="number">400</span> * <span class="number">1024</span>,</span><br><span class="line">            cwd: pro_item.path</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>) </span>&#123;</span><br><span class="line">            cmd_result = err ? stderr : stdout;</span><br><span class="line">            logger.info(cmd_result);</span><br><span class="line">        &#125;);</span><br><span class="line">        res.end();</span><br><span class="line">        logger.debug(<span class="string">"push trigger end"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.zen) &#123;</span><br><span class="line">        <span class="comment">//ping</span></span><br><span class="line">        res.end();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> POST = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        POST += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            POST = <span class="built_in">JSON</span>.parse(POST);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Error</span>) &#123;</span><br><span class="line">            POST = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        main(req, res, POST);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(config.port);</span><br><span class="line">logger.info(<span class="string">"Server runing at port: "</span> + config.port + <span class="string">"."</span>);</span><br></pre></td></tr></table></figure><p>config.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#启动端口</span><br><span class="line"><span class="keyword">var</span> port = xxx;</span><br><span class="line">#与coding的token配置一致</span><br><span class="line"><span class="keyword">var</span> token = <span class="string">'xxx'</span>;</span><br><span class="line"><span class="keyword">var</span> projects = &#123;</span><br><span class="line">    hexo: &#123;</span><br><span class="line">        path: <span class="string">'/data/publish/hexo/'</span>,</span><br><span class="line">        url: <span class="string">'git@git.coding.net:farwmarth/webhook.git'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//push请求要执行的脚本</span></span><br><span class="line">    shell_name: <span class="string">"deploy.sh"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> hook_log = <span class="string">'hook.log'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    projects: projects,</span><br><span class="line">    port: port,</span><br><span class="line">    token: token,</span><br><span class="line">    hook_log: hook_log,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>deploy.sh</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line"><span class="meta">#</span>为了拉主题</span><br><span class="line">git submodule update --recursive --init</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署好服务,配置好webhook后，可以愉快地写完文章直接<code>commit</code>,而不用再等待<code>deploy</code>了.</p><h2 id="安全性总结"><a href="#安全性总结" class="headerlink" title="安全性总结"></a>安全性总结</h2><ul><li>用travis记得将私钥加密</li><li>如果要用密钥最好用项目部署公钥,并控制好读写权限</li><li>webhook最好设置<code>token</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现博客的图片和文章数量增长后,hexo生成和发布的时间越来越长,而且换了电脑后hexo的环境又要倒腾一遍,实在是消耗时间。&lt;/p&gt;
&lt;p&gt;但是又不想换简书这种单纯的写作平台，毕竟博客还是需要一点个性化的元素。&lt;/p&gt;
&lt;p&gt;那能不能我写完markdown然后commit之后就可以自动生成静态页面自动发布呢？当然懒人们有很多种办法。研究了一下一般都是用&lt;code&gt;webhook&lt;/code&gt;来实现,目前大概有几种方式:&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.farwmarth.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.farwmarth.com/tags/hexo/"/>
    
      <category term="github" scheme="http://www.farwmarth.com/tags/github/"/>
    
      <category term="coding" scheme="http://www.farwmarth.com/tags/coding/"/>
    
      <category term="weghook" scheme="http://www.farwmarth.com/tags/weghook/"/>
    
  </entry>
  
  <entry>
    <title>hexo图片迁移至七牛</title>
    <link href="http://www.farwmarth.com/hexo%E5%9B%BE%E7%89%87%E8%BF%81%E7%A7%BB%E8%87%B3%E4%B8%83%E7%89%9B/"/>
    <id>http://www.farwmarth.com/hexo图片迁移至七牛/</id>
    <published>2017-03-11T16:21:00.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前图片一直是直接到在page服务上的,最近发现图片越来越多,打算图片迁移到七牛上.</p><p>七牛可以cdn加速,每月有固定的免费流量,可以设置防盗链,可以自动压缩图片打水印。众多优点。对小博客来说真是有莫大的帮助。</p><p>七牛注册这些过程就略过不表了.前置工作</p><ul><li>注册七牛账号并创建对象空间，充十块自定义域名</li><li>绑定<a href="https://support.qiniu.com/hc/kb/article/68977" target="_blank" rel="noopener">加速域名</a>，自定义域名必须为中国大陆已备案。推荐使用二级域名。</li><li>设置一下防盗链和图片瘦身<br><img src="http://farwmarth.bestnewbee.com/images/uploads/2017/03/qiniu_steal.png" alt="防盗链"></li><li>获取AccessKey  SecretKey</li></ul><a id="more"></a><h1 id="批量迁移"><a href="#批量迁移" class="headerlink" title="批量迁移"></a>批量迁移</h1><p><code>qrsync</code>已经被七牛废弃了,现在使用<a href="http://devtools.qiniu.com/qshell-v2.0.5.zip" target="_blank" rel="noopener">qshell</a>完成图片批量同步</p><p>我的迁移目录结构<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── gen4idx.py #生成索引</span><br><span class="line">├── images #要同步的图片,可多级</span><br><span class="line">├── qshell # 同步程序</span><br><span class="line">├── qsync.json #同步配置</span><br><span class="line">├── qsync.sh #同步shell</span><br><span class="line">└── upload.log #同步日志</span><br></pre></td></tr></table></figure></p><h2 id="生成图片索引gen4idx"><a href="#生成图片索引gen4idx" class="headerlink" title="生成图片索引gen4idx"></a>生成图片索引gen4idx</h2><p>因为七牛上传的图片没有预览界面只能在对象存储中搜索查看,非常不方便,我们可以在同步前遍历一下目录生成一个html也同步到七牛对象空间中.这样访问html就可以检索所有的图片了,改造了一下其他人写的索引代码放在<a href="https://gist.github.com/wujiyu115/d4c91852357853678b8f675b11f56421" target="_blank" rel="noopener">gist</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>要遍历的根目录 指定的图片目录用逗号隔开</span><br><span class="line">python gen4idx.py images NULL</span><br></pre></td></tr></table></figure><h2 id="qshell使用"><a href="#qshell使用" class="headerlink" title="qshell使用"></a><a href="https://developer.qiniu.com/kodo/tools/qshell" target="_blank" rel="noopener">qshell</a>使用</h2><h3 id="初始化账户"><a href="#初始化账户" class="headerlink" title="初始化账户"></a>初始化账户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./qshell  account AccessKey  SecretKey</span><br></pre></td></tr></table></figure><h3 id="配置qsync-json"><a href="#配置qsync-json" class="headerlink" title="配置qsync.json"></a>配置qsync.json</h3><p>配置参考<a href="https://github.com/qiniu/qshell/blob/master/docs/qupload.md" target="_blank" rel="noopener">文档</a><br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"src_dir"</span>            :   <span class="string">"/Users/far/Develop/tools/qiniu/"</span>,</span><br><span class="line">   <span class="attr">"bucket"</span>             :   <span class="string">"farwmarth"</span>,</span><br><span class="line">   <span class="attr">"overwrite"</span>          :   <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">"check_exists"</span>       :   <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"check_hash"</span>         :   <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">"check_size"</span>         :   <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"rescan_local"</span>       :   <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"skip_file_prefixes"</span> :   <span class="string">"qrsboxcli,qshell"</span>,</span><br><span class="line">   <span class="attr">"skip_fixed_strings"</span> :   <span class="string">".svn,.git"</span>,</span><br><span class="line">   <span class="attr">"skip_suffixes"</span>      :   <span class="string">".DS_Store,.exe,.log,.sh,.py,.pyc,.json,.md"</span>,</span><br><span class="line">   <span class="attr">"log_file"</span>           :   <span class="string">"upload.log"</span>,</span><br><span class="line">   <span class="attr">"log_level"</span>          :   <span class="string">"info"</span>,</span><br><span class="line">   <span class="attr">"log_rotate"</span>         :   <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"log_stdout"</span>         :   <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./qshell qupload 2 qsync.json</span><br></pre></td></tr></table></figure><p>同步完成后会生成log,终端上也会有同步的过程和统计信息,如果同步异常中断了也会接着上次的进度续传的.<br><img src="http://farwmarth.bestnewbee.com/images/uploads/2017/03/qiniu_upload.png" alt="同步"></p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>列举空间下的列表到控制台输出</span><br><span class="line">./qshell  listbucket farwmarth stdout</span><br><span class="line"><span class="meta">#</span>列举目录中的文件到result.txt中</span><br><span class="line">./qshell  dircache . result.txt</span><br></pre></td></tr></table></figure><h1 id="替换图片"><a href="#替换图片" class="headerlink" title="替换图片"></a>替换图片</h1><p>替换图片比较简单<br><img src="http://farwmarth.bestnewbee.com/images/uploads/2017/03/qiniu_reg_relplace.png" alt="替换图片"></p><h1 id="几个上传七牛的写作插件"><a href="#几个上传七牛的写作插件" class="headerlink" title="几个上传七牛的写作插件"></a>几个上传七牛的写作插件</h1><ul><li>MWeb</li><li>alfred插件上传: <a href="https://github.com/iammapping/alfred-uploader" target="_blank" rel="noopener">https://github.com/iammapping/alfred-uploader</a></li><li>hexo插件: <a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">https://github.com/gyk001/hexo-qiniu-sync</a></li><li>极简图床: <a href="http://yotuku.cn/#/" target="_blank" rel="noopener">http://yotuku.cn/#/</a></li></ul><p>试了 <code>ulysses</code> <code>ia-write</code>等一打写作工具后最后停留在了<code>MWeb</code>和<code>Sublime</code>上.<code>MWeb</code>的各项插件很齐全,写MarkDown体验也好.</p><p><img src="http://farwmarth.bestnewbee.com/images/uploads/2017/03/mweb.png" alt="mweb"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前图片一直是直接到在page服务上的,最近发现图片越来越多,打算图片迁移到七牛上.&lt;/p&gt;
&lt;p&gt;七牛可以cdn加速,每月有固定的免费流量,可以设置防盗链,可以自动压缩图片打水印。众多优点。对小博客来说真是有莫大的帮助。&lt;/p&gt;
&lt;p&gt;七牛注册这些过程就略过不表了.前置工作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册七牛账号并创建对象空间，充十块自定义域名&lt;/li&gt;
&lt;li&gt;绑定&lt;a href=&quot;https://support.qiniu.com/hc/kb/article/68977&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;加速域名&lt;/a&gt;，自定义域名必须为中国大陆已备案。推荐使用二级域名。&lt;/li&gt;
&lt;li&gt;设置一下防盗链和图片瘦身&lt;br&gt;&lt;img src=&quot;http://farwmarth.bestnewbee.com/images/uploads/2017/03/qiniu_steal.png&quot; alt=&quot;防盗链&quot;&gt;&lt;/li&gt;
&lt;li&gt;获取AccessKey  SecretKey&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.farwmarth.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.farwmarth.com/tags/hexo/"/>
    
      <category term="qiniu" scheme="http://www.farwmarth.com/tags/qiniu/"/>
    
  </entry>
  
  <entry>
    <title>给shadowsocks插上tcptun,bbr这对翅膀</title>
    <link href="http://www.farwmarth.com/vultr/"/>
    <id>http://www.farwmarth.com/vultr/</id>
    <published>2017-03-10T04:10:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近<a href="https://www.vultr.com/" target="_blank" rel="noopener">vultr</a> 搞活动充五刀送五刀.之前用的服务商速度有点不给力.想着撸个ss玩玩,晚上折腾到一点多, 易票联的<code>全球付</code>卡在vultr一直刷不了.又不想用<code>paypal</code>绑银行卡.试着把<code>全球付</code>的卡绑到<code>paypal</code>上。然后用<code>paypal</code>一刷居然成功了.</p><p><code>vultr</code>比<code>linode</code>同等配置价格更便宜.<code>500G</code>的流量绝对够用了.知乎上看了一下好像日本的线路速度比较快.自己也测试了一下.然后开了个实例准备试用几个月看效果如何.</p><h2 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h2><ul><li><p>国内线路测试vps速度ping<br><a href="http://ping.chinaz.com/45.76.185.184" target="_blank" rel="noopener">http://ping.chinaz.com/45.76.185.184</a></p></li><li><p>speedtest测试带宽</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py</span><br><span class="line">python speedtest.py</span><br></pre></td></tr></table></figure></li></ul><h1 id="Shadowsocks安装"><a href="#Shadowsocks安装" class="headerlink" title="Shadowsocks安装"></a>Shadowsocks安装</h1><h2 id="安装Shadowsocks-go"><a href="#安装Shadowsocks-go" class="headerlink" title="安装Shadowsocks-go"></a>安装Shadowsocks-go</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>安装</span><br><span class="line">wget --no-check-certificate -O shadowsocks-go.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh</span><br><span class="line">chmod +x shadowsocks-go.sh</span><br><span class="line">./shadowsocks-go.sh 2&gt;&amp;1 | tee shadowsocks-go.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>默认配置文件在</span><br><span class="line">/etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装后脚本提示："><a href="#安装后脚本提示：" class="headerlink" title="安装后脚本提示："></a>安装后脚本提示：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Congratulations, Shadowsocks-go install completed!</span><br><span class="line">Your Server IP:your_server_ip</span><br><span class="line">Your Server Port:your_server_port</span><br><span class="line">Your Password:your_password</span><br><span class="line">Your Local Port:1080</span><br><span class="line">Your Encryption Method:aes-256-cfb</span><br><span class="line"></span><br><span class="line">安装完成后即已后台启动`Shadowsocks-go`运行：</span><br><span class="line"><span class="meta">#</span>启动：</span><br><span class="line">/etc/init.d/shadowsocks start</span><br><span class="line"><span class="meta">#</span>停止：</span><br><span class="line">/etc/init.d/shadowsocks stop</span><br><span class="line"><span class="meta">#</span>重启：</span><br><span class="line">/etc/init.d/shadowsocks restart</span><br><span class="line"><span class="meta">#</span>状态：</span><br><span class="line">/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure><h3 id="多用户多端口配置文件示例："><a href="#多用户多端口配置文件示例：" class="headerlink" title="多用户多端口配置文件示例："></a>多用户多端口配置文件示例：</h3><p>配置文件路径：<code>/etc/shadowsocks/config.json</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;port_password&quot;:&#123;</span><br><span class="line">         &quot;8989&quot;:&quot;password0&quot;,</span><br><span class="line">         &quot;9001&quot;:&quot;password1&quot;,</span><br><span class="line">         &quot;9002&quot;:&quot;password2&quot;,</span><br><span class="line">         &quot;9003&quot;:&quot;password3&quot;,</span><br><span class="line">         &quot;9004&quot;:&quot;password4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;timeout&quot;:600</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="BBR"><a href="#BBR" class="headerlink" title="BBR"></a>BBR</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>BBR是google开源的一个TCP BBR拥塞控制算法,可以进行单边加速</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>手动安装要更新内核,用这个一键安装</span><br><span class="line"><span class="meta">#</span>https://blog.kuoruan.com/115.html</span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line">chmod +x bbr.sh</span><br><span class="line">./bbr.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>验证是否成功</span><br><span class="line">sysctl -a|grep tcp_congestion_control</span><br><span class="line"><span class="meta">#</span>net.ipv4.tcp_congestion_control = bbr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>验证2</span><br><span class="line">lsmod | grep bbr</span><br><span class="line"><span class="meta">#</span>tcp_bbr                16384  5</span><br></pre></td></tr></table></figure><h1 id="kctrun"><a href="#kctrun" class="headerlink" title="kctrun"></a>kctrun</h1><h2 id="Kcptun介绍"><a href="#Kcptun介绍" class="headerlink" title="Kcptun介绍"></a>Kcptun介绍</h2><p>Kcptun 是一个非常简单和快速的，基于 KCP 协议的 UDP 隧道，它可以将 TCP 流转换为KCP+UDP 流。而 KCP 是一个快速可靠协议，能以比 TCP浪费10%-20%的带宽的代价，换取平均延迟降低30%-40%，且最大延迟降低三倍的传输效果。</p><p>Kcptun 是 KCP 协议的一个简单应用，可以用于任意 TCP 网络程序的传输承载，以提高网络流畅度，降低掉线情况。由于 Kcptun 使用 Go 语言编写，内存占用低（经测试，在64M内存服务器上稳定运行），而且适用于所有平台，甚至 Arm 平台。</p><h2 id="简易原理"><a href="#简易原理" class="headerlink" title="简易原理"></a>简易原理</h2><p><img src="http://farwmarth.bestnewbee.com/images/kcp.jpg" alt="kcp"></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/kuoruan/kcptun_installer/master/kcptun.sh</span><br><span class="line">chmod +x ./kcptun.sh</span><br><span class="line">/kcptun.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看kcptun日志</span><br><span class="line">./kcptun.sh log</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>配置文件</span><br><span class="line">/usr/share/kcptun/server-config.json</span><br><span class="line"><span class="meta">#</span>kcptun服务器</span><br><span class="line">/usr/share/kcptun/server_linux_amd64</span><br><span class="line"><span class="meta">#</span>Kcptun 日志文件目录:</span><br><span class="line">/var/log/kcptun/</span><br><span class="line"><span class="meta">#</span>开关kcptun</span><br><span class="line"><span class="meta">#</span>Supervisor 命令:</span><br><span class="line">    service supervisord &#123;start|stop|restart|status&#125;</span><br><span class="line">                        &#123;启动|关闭|重启|查看状态&#125;</span><br><span class="line"><span class="meta">#</span>Kcptun 相关命令:</span><br><span class="line">    supervisorctl &#123;start|stop|restart|status&#125; kcptun&lt;id&gt;</span><br><span class="line">                  &#123;启动|关闭|重启|查看状态&#125;</span><br></pre></td></tr></table></figure><h1 id="Mac上kcptun和ss配置"><a href="#Mac上kcptun和ss配置" class="headerlink" title="Mac上kcptun和ss配置"></a>Mac上kcptun和ss配置</h1><p><a href="https://github.com/xtaci/kcptun/releases" target="_blank" rel="noopener">https://github.com/xtaci/kcptun/releases</a><br>下载 kcptun-darwin-amd64-20170308.tar.gz</p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo ./client_darwin_amd64 -l ":kcptun加速端口" -mode fast -r "vps的ip:kcptun对外端口" --crypt "加密方式(aes)" --key "kcptun密码"</span><br></pre></td></tr></table></figure><p><img src="http://farwmarth.bestnewbee.com/images/kcptun.jpg" alt="kcptun"></p><h2 id="gui"><a href="#gui" class="headerlink" title="gui"></a>gui</h2><p>win: <a href="https://github.com/dfdragon/kcptun_gclient" target="_blank" rel="noopener">https://github.com/dfdragon/kcptun_gclient</a><br>mac: <a href="https://github.com/dfdragon/kcptun_xclient" target="_blank" rel="noopener">https://github.com/dfdragon/kcptun_xclient</a><br>截图是windows的ui,mac配置差不多<br><img src="http://farwmarth.bestnewbee.com/images/Kcptun_GUI_config.png" alt="kcptun_gui"></p><h1 id="supervisord"><a href="#supervisord" class="headerlink" title="supervisord"></a>supervisord</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/supervisor/supervisord.conf</span><br><span class="line">files = /etc/supervisor/config.d/*.ini</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h2 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h2><ul><li><a href="https://teddysun.com/486.html" target="_blank" rel="noopener">https://teddysun.com/486.html</a></li><li><a href="https://blog.kuoruan.com/110.html" target="_blank" rel="noopener">https://blog.kuoruan.com/110.html</a></li><li><a href="http://hohothink.com/fq" target="_blank" rel="noopener">http://hohothink.com/fq</a></li><li><a href="http://xn--rgvu79ah1g.com/ios%E4%B9%8B%E8%B7%AF/speed-up" target="_blank" rel="noopener">http://xn--rgvu79ah1g.com/ios%E4%B9%8B%E8%B7%AF/speed-up</a></li><li><a href="https://miaocode.tk/hello-kcp/" target="_blank" rel="noopener">https://miaocode.tk/hello-kcp/</a></li></ul><h2 id="算法参考"><a href="#算法参考" class="headerlink" title="算法参考"></a>算法参考</h2><ul><li><a href="http://blog.csdn.net/dog250/article/details/52830576" target="_blank" rel="noopener">http://blog.csdn.net/dog250/article/details/52830576</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近&lt;a href=&quot;https://www.vultr.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vultr&lt;/a&gt; 搞活动充五刀送五刀.之前用的服务商速度有点不给力.想着撸个ss玩玩,晚上折腾到一点多, 易票联的&lt;code&gt;全球付&lt;/code&gt;卡在vultr一直刷不了.又不想用&lt;code&gt;paypal&lt;/code&gt;绑银行卡.试着把&lt;code&gt;全球付&lt;/code&gt;的卡绑到&lt;code&gt;paypal&lt;/code&gt;上。然后用&lt;code&gt;paypal&lt;/code&gt;一刷居然成功了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vultr&lt;/code&gt;比&lt;code&gt;linode&lt;/code&gt;同等配置价格更便宜.&lt;code&gt;500G&lt;/code&gt;的流量绝对够用了.知乎上看了一下好像日本的线路速度比较快.自己也测试了一下.然后开了个实例准备试用几个月看效果如何.&lt;/p&gt;
&lt;h2 id=&quot;速度测试&quot;&gt;&lt;a href=&quot;#速度测试&quot; class=&quot;headerlink&quot; title=&quot;速度测试&quot;&gt;&lt;/a&gt;速度测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;国内线路测试vps速度ping&lt;br&gt;&lt;a href=&quot;http://ping.chinaz.com/45.76.185.184&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://ping.chinaz.com/45.76.185.184&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;speedtest测试带宽&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python speedtest.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Shadowsocks安装&quot;&gt;&lt;a href=&quot;#Shadowsocks安装&quot; class=&quot;headerlink&quot; title=&quot;Shadowsocks安装&quot;&gt;&lt;/a&gt;Shadowsocks安装&lt;/h1&gt;&lt;h2 id=&quot;安装Shadowsocks-go&quot;&gt;&lt;a href=&quot;#安装Shadowsocks-go&quot; class=&quot;headerlink&quot; title=&quot;安装Shadowsocks-go&quot;&gt;&lt;/a&gt;安装Shadowsocks-go&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget --no-check-certificate -O shadowsocks-go.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +x shadowsocks-go.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./shadowsocks-go.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks-go.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;默认配置文件在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/shadowsocks/config.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vultr" scheme="http://www.farwmarth.com/tags/vultr/"/>
    
      <category term="shadowsocks" scheme="http://www.farwmarth.com/tags/shadowsocks/"/>
    
      <category term="tcptun" scheme="http://www.farwmarth.com/tags/tcptun/"/>
    
      <category term="bbr" scheme="http://www.farwmarth.com/tags/bbr/"/>
    
  </entry>
  
  <entry>
    <title>语音服务器的选型</title>
    <link href="http://www.farwmarth.com/%E8%AF%AD%E9%9F%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%80%89%E5%9E%8B/"/>
    <id>http://www.farwmarth.com/语音服务器的选型/</id>
    <published>2017-01-06T07:13:02.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近游戏要接入一下语音服务器,调查了一下融合的语音sdk<br>腾讯云GVoice:<a href="https://www.qcloud.com/document/product/556/7673" target="_blank" rel="noopener">https://www.qcloud.com/document/product/556/7673</a><br>好像只有这个比较靠谱,但是收费好像有点贵,还是决定基于原有的免费的百度语音识别造一个轮子<br><a id="more"></a></p><h1 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h1><p>要解决几个问题</p><ul><li>语音转文字翻译</li><li>高效的web服务器</li><li>分布式的文件存储</li><li>与游戏服务器沟通的消息队列选择</li></ul><h2 id="语音转文字翻译"><a href="#语音转文字翻译" class="headerlink" title="语音转文字翻译"></a>语音转文字翻译</h2><p>这个真没法自己造轮子,选择了百度的语音服务<br>语音识别<code>50000次/日</code>配额<br>支持的语音时长上限为60s</p><ul><li>auth文档<br><a href="http://developer.baidu.com/wiki/index.php?title=docs/oauth/client" target="_blank" rel="noopener">http://developer.baidu.com/wiki/index.php?title=docs/oauth/client</a></li><li>刷新access_token<br><a href="http://developer.baidu.com/wiki/index.php?title=%E4%BD%BF%E7%94%A8Refresh_Token%E8%8E%B7%E5%8F%96Access_Token" target="_blank" rel="noopener">http://developer.baidu.com/wiki/index.php?title=%E4%BD%BF%E7%94%A8Refresh_Token%E8%8E%B7%E5%8F%96Access_Token</a></li><li>语音识别接口<br><a href="http://yuyin.baidu.com/docs/asr/57" target="_blank" rel="noopener">http://yuyin.baidu.com/docs/asr/57</a></li></ul><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">local</span> new_timer = ngx.timer.at</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> access_token</span><br><span class="line"><span class="keyword">local</span> refresh_token</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.timer_refresh_token</span><span class="params">(resp)</span></span></span><br><span class="line">    <span class="keyword">local</span> expires_in_sec = resp.expires_in - <span class="number">3600</span></span><br><span class="line">    expires_in_sec = expires_in_sec &lt; <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">or</span> expires_in_sec</span><br><span class="line">    <span class="comment">--过期前一天刷新token</span></span><br><span class="line">    new_timer(expires_in_sec,M.refresh_token)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.gen_token</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> access_token <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> data = &#123; grant_type=<span class="string">"client_credentials"</span>, client_id = Config.AppKey, client_secret = Config.AppSecret&#125;</span><br><span class="line">        <span class="keyword">local</span> resp,err = http_util.get_baidu_token(Config.TOKEN_URL, data)</span><br><span class="line">        access_token = resp.access_token</span><br><span class="line">        refresh_token = resp.refresh_token</span><br><span class="line">        M.timer_refresh_token(resp)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.refresh_token</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> refresh_token <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> data = &#123; grant_type=<span class="string">"refresh_token"</span>, client_id = Config.AppKey, client_secret = Config.AppSecret, refresh_token = refresh_token &#125;</span><br><span class="line">        <span class="keyword">local</span> resp,err = http_util.get_baidu_token(Config.TOKEN_URL, data)</span><br><span class="line">        access_token = resp.access_token</span><br><span class="line">        refresh_token = resp.refresh_token</span><br><span class="line">        M.timer_refresh_token(resp)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        M.gen_token()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.translate_voice</span><span class="params">(voice)</span></span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">len</span> = <span class="built_in">string</span>.<span class="built_in">len</span>(voice)</span><br><span class="line">    <span class="keyword">local</span> base64_str =  ngx.encode_base64(voice)</span><br><span class="line">    <span class="keyword">local</span> data = &#123;cuid = Config.CUID, token= access_token, channel = <span class="number">1</span>, <span class="built_in">format</span> = <span class="string">"amr"</span>, rate = <span class="number">8000</span>,</span><br><span class="line">            <span class="built_in">len</span> = <span class="built_in">len</span>, speech = base64_str &#125;</span><br><span class="line">    <span class="keyword">local</span> resp,err = http_util.post_ret_json(Config.VOICE_URL, data)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> err <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> err_no = resp.errno</span><br><span class="line">        <span class="keyword">if</span> ERR_TBL[err_no] <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> ERR_TBL[err_no]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> resp.result[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h2><p>所有的结构是在python在<code>Flask</code>上构建的,怕运行效率不行想重新写一个.几经比较之后,没有选择比较熟悉的<code>java</code>语言和<code>tornado</code>,而是选择了<code>openresty</code>,主要是基于几点考虑</p><ul><li>是否是经过验证的框架</li><li>是否是熟悉的开发语言</li><li>开发和部署是否简便快捷</li></ul><p><code>openresty</code> 是在<code>nginx</code>的基础上嵌入了<code>lua</code>的支持,兼备了<code>Python</code>快速开发和<code>Nginx C</code>模块的高性能</p><h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><p>前期小规模的文件存储直接单机就可以了.而且语音这种是有时效性的,通过<code>ttl</code>过期即可清除,磁盘空间不会无限增长.<br>但为了做个新的尝试,也调查了一下分布式的小文件存储</p><ul><li>tfs : <a href="http://tfs.taobao.org/" target="_blank" rel="noopener">http://tfs.taobao.org/</a><br><code>tfs</code>淘宝的开源方案年久失修,果断弃之</li><li>mogilefs : <a href="https://github.com/mogilefs" target="_blank" rel="noopener">https://github.com/mogilefs</a><br>要加入<code>mysql</code>弃之</li><li>fastdfs : <a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs</a><br>c编写,用的人比较多,但是看了几篇对比文章之后也没有做为最终的选择</li><li>seaweedfs : <a href="https://github.com/chrislusf/seaweedfs" target="_blank" rel="noopener">https://github.com/chrislusf/seaweedfs</a></li><li>bilibfs : <a href="https://github.com/Terry-Mao/bfs" target="_blank" rel="noopener">https://github.com/Terry-Mao/bfs</a><br>借鉴了<code>seaweedfs</code>和<code>fastdfs</code>,<a href="http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=406016886&amp;idx=1&amp;sn=f5aa286373fb981c9de904568fe7ddb2&amp;scene=5&amp;srcid=0411E8naA5E9O1R10U1Utv6y#rd" target="_blank" rel="noopener">这篇文章</a>可以对bfs有个大概的了解,没有用这个的原因是加加入</li><li>baidubfs : <a href="https://github.com/baidu/bfs" target="_blank" rel="noopener">https://github.com/baidu/bfs</a><br>c++编写,不熟悉</li></ul><p>最终使用了<code>seaweedfs</code> go语言编写,简单易用</p><p>参考:<br><a href="http://blog.qiniu.com/archives/2546" target="_blank" rel="noopener">http://blog.qiniu.com/archives/2546</a><br><a href="http://wenjun.org/?p=1087" target="_blank" rel="noopener">http://wenjun.org/?p=1087</a><br><a href="http://www.simlinux.com/books/FastDFS.pdf" target="_blank" rel="noopener">http://www.simlinux.com/books/FastDFS.pdf</a></p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>游戏内<code>auth</code>和后台<code>gm</code>通信中间件使用的<code>rabbitmq</code>,为了保持一致性也使用了这个</p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="http://farwmarth.bestnewbee.com/images/audio_server.png" alt="audio_server"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>由玩家发起语音聊天,将语音压缩成amr上传到中心主机nginx上,由nginx反代<code>seaweedfs</code>集群完成语音文件的存储,然后将<code>返回的文件id</code>加上<code>内网的集群ip</code>组合成<code>语音id</code>将消息信息<code>push</code>到<code>rabbitmq</code>队列中,游戏服务器作为<code>mq</code>的订阅者实时处理队列内容将消息按频道和<code>语音id</code>广播给对应的游戏客户端,游戏客户端用<code>语音id</code>请求中心主机nginx再从代理的<code>seaweedfs</code>集群中取语音文件.整个语音聊天的过程就完成了.</p><h2 id="关于百度语音识别部分"><a href="#关于百度语音识别部分" class="headerlink" title="关于百度语音识别部分"></a>关于百度语音识别部分</h2><p>百度语音识别api并不支持流式上传数据,而且把识别这部分放到上传语音的过程中加重了<code>rpc</code>调用的负担.所以这部分可以放到游戏客户端直接请求百度api</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近游戏要接入一下语音服务器,调查了一下融合的语音sdk&lt;br&gt;腾讯云GVoice:&lt;a href=&quot;https://www.qcloud.com/document/product/556/7673&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.qcloud.com/document/product/556/7673&lt;/a&gt;&lt;br&gt;好像只有这个比较靠谱,但是收费好像有点贵,还是决定基于原有的免费的百度语音识别造一个轮子&lt;br&gt;
    
    </summary>
    
      <category term="audio" scheme="http://www.farwmarth.com/categories/audio/"/>
    
      <category term="skill" scheme="http://www.farwmarth.com/categories/audio/skill/"/>
    
    
      <category term="游戏" scheme="http://www.farwmarth.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>将内网终端分享给其他人使用</title>
    <link href="http://www.farwmarth.com/ttyd/"/>
    <id>http://www.farwmarth.com/ttyd/</id>
    <published>2017-01-05T03:54:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>起因是某人要学习下<code>linux</code>,但是不想用虚拟机装linux,在网上也找了几个在线的<code>shell</code>练习网站,感觉不是很满意,于是想把自己内网主机上的终端share一下,github搜索了一下还真有这样的项目.</p><h2 id="ttyd"><a href="#ttyd" class="headerlink" title="ttyd"></a>ttyd</h2><p><code>ttyd</code>是一个把自己的终端通过web方式共享给其他人操作的工具</p><p><a href="https://github.com/tsl0922/ttyd" target="_blank" rel="noopener">https://github.com/tsl0922/ttyd</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ttyd login</span><br><span class="line"><span class="meta">#</span>默认端口是7681 用login方式要输入账号密码</span><br><span class="line"><span class="meta">#</span>http://localhost:7681</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><p><code>ngrok</code>服务可以分配给你一个域名让你本地的web项目提供给外网访问，特别适合向别人展示你本机的web demo 以及调试一些远程的API.</p><ul><li>qydev : <a href="http://qydev.com/" target="_blank" rel="noopener">http://qydev.com/</a></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ngrok -config=ngrok.cfg -hostname farwmarth 7681</span><br><span class="line"><span class="meta">#</span>http://farwmarth.tunnel.qydev.com/</span><br></pre></td></tr></table></figure><p><img src="http://farwmarth.bestnewbee.com/images/ttyd.png" alt="ttyd"></p><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>frp 是一个高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务，支持 tcp, udp, http, https 等协议类型，并且 web 服务支持根据域名进行路由转发</p><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/clangcn/onekey-install-shell/master/frps/install-frps.sh -O ./install-frps.sh</span><br><span class="line">chmod 700 ./install-frps.sh</span><br><span class="line">./install-frps.sh install</span><br></pre></td></tr></table></figure><h3 id="frp配合ttyd的配置"><a href="#frp配合ttyd的配置" class="headerlink" title="frp配合ttyd的配置"></a>frp配合ttyd的配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = frp.lu8.win</span><br><span class="line">server_port = 7000</span><br><span class="line">log_file = ./frpc.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br><span class="line">privilege_token = frp888</span><br><span class="line"></span><br><span class="line">[http_mode]</span><br><span class="line"><span class="meta">#</span>注意修改上方[]内的内容，不要与其他隧道名称重复</span><br><span class="line"><span class="meta">#</span>privilege_mode特权模式</span><br><span class="line">privilege_mode = true</span><br><span class="line">type = http</span><br><span class="line"><span class="meta">#</span>local_ip本地服务IP</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line"><span class="meta">#</span>local_port本地服务端口</span><br><span class="line">local_port = 7681</span><br><span class="line">custom_domains = farwmarth.frp.lu8.win</span><br></pre></td></tr></table></figure><h3 id="frp配合nginx"><a href="#frp配合nginx" class="headerlink" title="frp配合nginx"></a>frp配合nginx</h3><p>域名解析到服务器<code>frptest.xxx.com</code></p><h4 id="服务器frp配置"><a href="#服务器frp配置" class="headerlink" title="服务器frp配置"></a>服务器frp配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">    bind_addr = 0.0.0.0</span><br><span class="line">    bind_port = 7000</span><br><span class="line">    vhost_http_port = 5999</span><br><span class="line"></span><br><span class="line">[frptest]</span><br><span class="line">    type = http</span><br><span class="line">    auth_token = xxx</span><br><span class="line">    custom_domains = frptest.xxx.com</span><br></pre></td></tr></table></figure><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream frptest&#123;</span><br><span class="line">    server 127.0.0.1:5999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name frptest.xxx.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://frptest;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_read_timeout 7200;</span><br><span class="line">        proxy_set_header Connection "";</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端frp配置"><a href="#客户端frp配置" class="headerlink" title="客户端frp配置"></a>客户端frp配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">    server_addr = 服务器ip</span><br><span class="line">    server_port = 7000</span><br><span class="line">    auth_token xxx</span><br><span class="line">    log_file = ./frpc.log</span><br><span class="line">    log_level = info</span><br><span class="line">    log_max_days = 3</span><br><span class="line"></span><br><span class="line">[frptest]</span><br><span class="line">    local_ip = 127.0.0.1</span><br><span class="line">    local_port = 8080</span><br><span class="line">    type = http</span><br><span class="line">    auth_token = xxx</span><br></pre></td></tr></table></figure><h3 id="用frp做ssh转发"><a href="#用frp做ssh转发" class="headerlink" title="用frp做ssh转发"></a>用frp做ssh转发</h3><p>时序图大致如下:</p><p><img src="http://farwmarth.bestnewbee.com/14904631822511.jpg" alt=""></p><h4 id="外网服务器配置"><a href="#外网服务器配置" class="headerlink" title="外网服务器配置"></a>外网服务器配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line">log_max_days = 7</span><br><span class="line">max_pool_count = 100</span><br><span class="line">log_file = frps.log</span><br><span class="line">log_level = info</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">listen_port = 6000</span><br><span class="line">type = tcp</span><br><span class="line">auth_token = 通讯加密token</span><br><span class="line">use_encryption = true</span><br><span class="line">use_gzip = true</span><br></pre></td></tr></table></figure><h4 id="内网客户端配置"><a href="#内网客户端配置" class="headerlink" title="内网客户端配置"></a>内网客户端配置</h4><p>先要安装ssh服务开启并将端口设置为<code>22022</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 外网服务器ip</span><br><span class="line">server_port = 7000</span><br><span class="line">auth_token = 通讯加密token</span><br><span class="line">log_file = ./frpc.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22022</span><br><span class="line">type = tcp</span><br><span class="line">use_gzip = true</span><br><span class="line">use_encryption = true</span><br></pre></td></tr></table></figure><h4 id="本机连接"><a href="#本机连接" class="headerlink" title="本机连接"></a>本机连接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -oPort=6000 内网客户端ssh用户@外网服务器ip</span><br></pre></td></tr></table></figure><h4 id="外网服务器访问内网web服务"><a href="#外网服务器访问内网web服务" class="headerlink" title="外网服务器访问内网web服务"></a>外网服务器访问内网web服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 1234</span><br><span class="line">log_max_days = 7</span><br><span class="line">max_pool_count = 100</span><br><span class="line">log_file = frps.log</span><br><span class="line">log_level = info</span><br><span class="line">vhost_http_port = 1235</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">auth_token = xxx</span><br><span class="line">custom_domains = xxx.xxx.com</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = m1-test-pub2.m1.ejoy.com</span><br><span class="line">server_port = 1234</span><br><span class="line">auth_token = xxx</span><br><span class="line">log_file = ./frpc.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port =10003</span><br><span class="line">custom_domains = xxx.xxx.com</span><br></pre></td></tr></table></figure><p>通过<code>http://xxx.xxx.com:1235</code>可以访问内网web服务</p><h2 id="socket-pipe"><a href="#socket-pipe" class="headerlink" title="socket-pipe"></a>socket-pipe</h2><p>node写的,直接看作者的介绍</p><ul><li><a href="https://joyqi.com/javascript/socket-pipe.html" target="_blank" rel="noopener">https://joyqi.com/javascript/socket-pipe.html</a></li><li><a href="https://github.com/joyqi/socket-pipe" target="_blank" rel="noopener">https://github.com/joyqi/socket-pipe</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起因是某人要学习下&lt;code&gt;linux&lt;/code&gt;,但是不想用虚拟机装linux,在网上也找了几个在线的&lt;code&gt;shell&lt;/code&gt;练习网站,感觉不是很满意,于是想把自己内网主机上的终端share一下,github搜索了一下还真有这样的项目.&lt;/p&gt;
&lt;h2 id=&quot;ttyd&quot;&gt;&lt;a href=&quot;#ttyd&quot; class=&quot;headerlink&quot; title=&quot;ttyd&quot;&gt;&lt;/a&gt;ttyd&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ttyd&lt;/code&gt;是一个把自己的终端通过web方式共享给其他人操作的工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tsl0922/ttyd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tsl0922/ttyd&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo ttyd login&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;默认端口是7681 用login方式要输入账号密码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;http://localhost:7681&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ttyd" scheme="http://www.farwmarth.com/tags/ttyd/"/>
    
  </entry>
  
  <entry>
    <title>初级运维指南</title>
    <link href="http://www.farwmarth.com/%E5%88%9D%E7%BA%A7%E8%BF%90%E7%BB%B4%E6%8C%87%E5%8D%97/"/>
    <id>http://www.farwmarth.com/初级运维指南/</id>
    <published>2017-01-04T01:42:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h1><ul><li>CentOS 7防火墙换用Friewalld</li></ul><h1 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h1><h2 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>安装</span><br><span class="line">yum install ssh</span><br><span class="line"><span class="meta">#</span>启动</span><br><span class="line">service sshd start</span><br><span class="line"><span class="meta">#</span>设置开机启动</span><br><span class="line">chkconfig ssd on</span><br><span class="line"><span class="meta">#</span>重启</span><br><span class="line">service sshd restart</span><br><span class="line"><span class="meta">#</span>重启网络</span><br><span class="line">service network restart</span><br><span class="line"><span class="meta">#</span>centos7</span><br><span class="line">systemctl restart  sshd.service</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置文件目录: <code>/etc/ssh/sshd_config</code> ,<a href="http://www.jinbuguo.com/openssh/sshd_config.html" target="_blank" rel="noopener">参考</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Port 22022 #对外端口,改了端口后别忘记了防火墙的出口端口设置</span><br><span class="line">Protocol 2 #协议</span><br><span class="line">RSAAuthentication yes #rsa登录</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile     .ssh/authorized_keys</span><br><span class="line">PermitRootLogin yes  #允许root用户以任何认证方式登录 without-password no</span><br><span class="line">SyslogFacility AUTHPRIV</span><br><span class="line">PasswordAuthentication no #禁止密码登录</span><br></pre></td></tr></table></figure><h3 id="只允许特定用户登录"><a href="#只允许特定用户登录" class="headerlink" title="只允许特定用户登录"></a>只允许特定用户登录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在sshd_config中设置AllowUsers</span><br><span class="line">AllowUsers a b c</span><br><span class="line">重启sshd服务，则只有a/b/c3个用户可以登陆</span><br></pre></td></tr></table></figure><h2 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>生成</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="meta">#</span>添加</span><br><span class="line">cat .ssh/id_rsa.pub &gt;&gt; .ssh/authorized_keys</span><br><span class="line"><span class="meta">#</span>检查</span><br><span class="line">cat .ssh/authorized_keys</span><br></pre></td></tr></table></figure><h2 id="常见免密码登录失败分析"><a href="#常见免密码登录失败分析" class="headerlink" title="常见免密码登录失败分析"></a>常见免密码登录失败分析</h2><h3 id="配置问题"><a href="#配置问题" class="headerlink" title="配置问题"></a>配置问题</h3><ul><li>检查配置文件<code>/etc/ssh/sshd_config</code>是否开启了<code>AuthorizedKeysFile</code>选项</li><li>检查<code>AuthorizedKeysFile</code>选项指定的文件是否存在并内容正常</li></ul><h3 id="目录权限问题"><a href="#目录权限问题" class="headerlink" title="目录权限问题"></a>目录权限问题</h3><ul><li>~权限设置为700</li><li>~/.ssh权限设置为700</li><li>~/.ssh/authorized_keys的权限设置为<code>600</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod 700 ~</span><br><span class="line">sudo chmod 700 ~/.ssh</span><br><span class="line">sudo chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置ssd防止暴力破解"><a href="#配置ssd防止暴力破解" class="headerlink" title="配置ssd防止暴力破解"></a><a href="https://github.com/denyhosts/denyhosts" target="_blank" rel="noopener">配置ssd防止暴力破解</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> KeyError: 'FAILED_ENTRY_REGEX10' 20161206居然有问题要还原代码编译 git reset --hard 65e1bc1</span><br><span class="line"><span class="meta">#</span>依赖</span><br><span class="line">pip install ipaddr</span><br><span class="line"><span class="meta">#</span>安装</span><br><span class="line">python steup.py install</span><br><span class="line"><span class="meta">#</span>编辑配置文件</span><br><span class="line">cp denyhosts.conf /etc</span><br><span class="line"><span class="meta">#</span>配置一下 /etc/denyhosts.conf</span><br><span class="line"><span class="meta">#</span>启动服务</span><br><span class="line">cp daemon-control-dist /etc/init.d/daemon-control</span><br><span class="line">chown root /etc/init.d/daemon-control</span><br><span class="line">chmod 700 /etc/init.d/daemon-control</span><br><span class="line"><span class="meta">#</span>编辑daemon-control</span><br><span class="line">DENYHOSTS_BIN   = "/usr/bin/denyhosts.py"</span><br><span class="line"><span class="meta">#</span>加入开机启动</span><br><span class="line">chkconfig --level 3 daemon-control on</span><br><span class="line">/etc/init.d/daemon-control start</span><br><span class="line"><span class="meta">#</span>日志tail -50 /var/log/denyhosts</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>https://github.com/denyhosts/denyhosts/blob/master/denyhosts.conf</span><br><span class="line"><span class="meta">#</span>linux版本相关 SECURE_LOG HOSTS_DENY LOCK_FILE</span><br><span class="line">SECURE_LOG = /var/log/secure  #ssh 日志文件，它是根据这个文件来判断的。</span><br><span class="line">HOSTS_DENY = /etc/hosts.deny  #控制用户登陆的文件，根据UNIX版本不同配置不同</span><br><span class="line">PURGE_DENY = 15m     #过多久后清除已经禁止的，默认为空，即马上清除掉，这个根据自己的需要设置。</span><br><span class="line">BLOCK_SERVICE  = sshd   #被加入hosts.deny后阻止的服务:阻止SSHD服务</span><br><span class="line"><span class="meta">#</span>允许无效用户失败的次数</span><br><span class="line">DENY_THRESHOLD_INVALID = 1</span><br><span class="line"><span class="meta">#</span>允许普通用户登陆失败的次数</span><br><span class="line">DENY_THRESHOLD_VALID = 10</span><br><span class="line"><span class="meta">#</span>允许root登陆失败的次数</span><br><span class="line">DENY_THRESHOLD_ROOT = 5</span><br><span class="line"><span class="meta">#</span>对WORK_DIR/restricted-usernames配置的用户次数判定</span><br><span class="line">DENY_THRESHOLD_RESTRICTED = 1</span><br><span class="line">WORK_DIR = /usr/share/denyhosts/data #工作目录</span><br><span class="line">SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES #allowed-hosts中的用户有可疑登录行为如果此配置为YES则会报告</span><br><span class="line">HOSTNAME_LOOKUP=NO  #是否做域名反解</span><br><span class="line">LOCK_FILE = /var/lock/subsys/denyhosts</span><br><span class="line"><span class="meta">#</span>########### THESE SETTINGS ARE OPTIONAL ############</span><br><span class="line">ADMIN_EMAIL =  wujiyu115@gmail.com #管理员邮件地址</span><br><span class="line">SMTP_HOST = localhost</span><br><span class="line">SMTP_PORT = 25</span><br><span class="line">SMTP_FROM = DenyHosts &lt;nobody@localhost&gt;</span><br><span class="line">SMTP_SUBJECT = Redocn-DenyHosts Report</span><br><span class="line">AGE_RESET_VALID=5d</span><br><span class="line">AGE_RESET_ROOT=25d</span><br><span class="line">AGE_RESET_RESTRICTED=25d</span><br><span class="line">AGE_RESET_INVALID=10d</span><br><span class="line"><span class="meta">#</span>######## THESE SETTINGS ARE SPECIFIC TO DAEMON MODE  ##########</span><br><span class="line">DAEMON_LOG = /var/log/denyhosts #日志文件</span><br><span class="line">DAEMON_SLEEP = 30s</span><br><span class="line">DAEMON_PURGE = 1h</span><br></pre></td></tr></table></figure><ul><li><a href="http://skypegnu1.blog.51cto.com/8991766/1641064" target="_blank" rel="noopener">http://skypegnu1.blog.51cto.com/8991766/1641064</a></li><li><a href="https://help.aliyun.com/knowledge_detail/41212.html" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/41212.html</a></li></ul><h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>启动</span><br><span class="line">sudo  nginx</span><br><span class="line"><span class="meta">#</span>关闭</span><br><span class="line">sudo nginx -s stop</span><br><span class="line"><span class="meta">#</span>检测配置是否正常:</span><br><span class="line">nginx –t</span><br><span class="line"><span class="meta">#</span>重新启动</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><h3 id="nginx反向代理长链接"><a href="#nginx反向代理长链接" class="headerlink" title="nginx反向代理长链接"></a>nginx反向代理长链接</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream chat_cluster&#123;</span><br><span class="line">     ##多server负载,根据ip_hash作分流也可以用weight权重分流</span><br><span class="line">    server 127.0.0.1:10000;</span><br><span class="line">    server 127.0.0.1:10001;</span><br><span class="line">    ip_hash;</span><br><span class="line">    keepalive 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name chat.rootk.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://chat_cluster;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        # very important, nginx will waitting for the response from tornado</span><br><span class="line">        # if the time have passed more than 7200, nginx send http 504 to client</span><br><span class="line">        proxy_read_timeout 7200;</span><br><span class="line">        proxy_set_header Connection "";</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lnmp集成环镜"><a href="#lnmp集成环镜" class="headerlink" title="lnmp集成环镜"></a>lnmp集成环镜</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>#默认网站(虚拟主机)##</span><br><span class="line">/usr/local/nginx/conf/vhost</span><br><span class="line"><span class="meta">#</span>LNMP默认网站配置文件：</span><br><span class="line">/usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span>LNMPA默认网站配置文件：</span><br><span class="line">/usr/local/nginx/conf/nginx.conf 和 /usr/local/apache/conf/extra/httpd-vhosts.conf</span><br><span class="line"><span class="meta">#</span>LAMP默认网站配置文件：</span><br><span class="line">/usr/local/apache/conf/extra/httpd-vhosts.conf</span><br><span class="line"><span class="meta">#</span>LAMP默认网站</span><br><span class="line">/home/wwwroot/default</span><br><span class="line"><span class="meta">#</span>做反代,nginx里面的server_name和tomcat那里的Host保持一致</span><br></pre></td></tr></table></figure><h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!!!!iptables ACCEPT要放在DROP前才生效 /etc/sysconfig/iptables</span><br><span class="line"><span class="meta">#</span>查看iptables的数据</span><br><span class="line">iptables -L -n</span><br><span class="line"><span class="meta">#</span>保存iptables的数据</span><br><span class="line">service iptables save</span><br><span class="line"><span class="meta">#</span>把某端口的权限开放给某个IP</span><br><span class="line">iptables -I INPUT -s 113.68.65.85 -p tcp --dport 3306 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 3306 -j DROP</span><br><span class="line">service iptables save</span><br><span class="line"><span class="meta">#</span>把某端口权限打开 dport指本地，sport指外部</span><br><span class="line">iptables -A INPUT -p tcp --dport 8888 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 8888 -j ACCEPT</span><br><span class="line"><span class="meta">#</span>限制只能某个ip访问端口</span><br><span class="line">iptables -I INPUT -s  10.21.213.74  -p tcp --dport 8888 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 8888 -j DROP</span><br><span class="line"><span class="meta">#</span>插入到指定位置 -i</span><br><span class="line">iptables -I INPUT 2 -s 14.23.124.130  -p    tcp --dport 8888 -j ACCEPT</span><br><span class="line"><span class="meta">#</span>添加允许之后要DROP掉其他端口的input</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line"><span class="meta">#</span>查看INPUT的linnumber</span><br><span class="line">iptables -L INPUT –line-numbers</span><br><span class="line"><span class="meta">#</span>删除一条</span><br><span class="line">iptables -D INPUT 3</span><br><span class="line"><span class="meta">#</span>保存</span><br><span class="line">service iptables save</span><br><span class="line"><span class="meta">#</span>查看iptables状态</span><br><span class="line">service iptables status</span><br><span class="line"><span class="meta">#</span>iptables服务重启</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h1 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="meta">#</span> Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure><h2 id="忘记密码："><a href="#忘记密码：" class="headerlink" title="忘记密码："></a>忘记密码：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld stop</span><br><span class="line">mysqld_safe --user=root --skip-grant-tables</span><br><span class="line">mysql -u root</span><br><span class="line">use mysql</span><br><span class="line">update user set password=password("new_pass") where user="root";</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="为root添加远程连接的能力："><a href="#为root添加远程连接的能力：" class="headerlink" title="为root添加远程连接的能力："></a>为root添加远程连接的能力：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY "root";</span><br><span class="line">use mysql;</span><br><span class="line">update user set Password = password('xxx') where User='root';</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta">#</span>修改 Mysql 配置文件 sudo vi /etc/mysql/my.cnf</span><br><span class="line"><span class="meta">#</span>注释#bind-address = 127.0.0.1</span><br><span class="line">重启sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE USER 'herogame'@'localhost' IDENTIFIED BY 'xxx'</span><br></pre></td></tr></table></figure><h2 id="加到开机列表"><a href="#加到开机列表" class="headerlink" title="加到开机列表:"></a>加到开机列表:</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig -add mysqld</span><br></pre></td></tr></table></figure><h2 id="一条命令解决mysql-config-not-found"><a href="#一条命令解决mysql-config-not-found" class="headerlink" title="一条命令解决mysql_config not found:"></a>一条命令解决mysql_config not found:</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>遇到过几次pip安装mysql-python的时候出现如题的问题，在这里记录一下解决方法。</span><br><span class="line"><span class="meta">#</span>找不到mysql_config一般是由于通过lnmp.org或者其他方式安装mysql以后mysql_config是在/usr/local/mysql/bin/里面，这里面的文件不是在任意位置都可以访问的</span><br><span class="line"><span class="meta">#</span>解决方法：</span><br><span class="line">ln -s /usr/local/mysql/bin/mysql_config /usr/local/bin/mysql_config</span><br><span class="line"><span class="meta">#</span>将mysql_config链接到/usr/local/bin目录下</span><br></pre></td></tr></table></figure><h1 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://blog.csdn.net/sonnet123/article/details/9290561</span><br></pre></td></tr></table></figure><h1 id="Tomcat加固"><a href="#Tomcat加固" class="headerlink" title="Tomcat加固"></a>Tomcat加固</h1><h2 id="Tomcat帐号安全"><a href="#Tomcat帐号安全" class="headerlink" title="Tomcat帐号安全"></a>Tomcat帐号安全</h2><ul><li>将<code>$CATALINA_HOME\conf\tomcat-users.xml</code>中文件的所有用户都注释掉</li><li>删除除了需要部署上去的应用，其余位于<code>$CATALINA_HOME\webapps</code>文件夹中的应用</li><li>禁止Tomcat显示目录列表,确保<code>$CATALINA_HOME\conf\web.xml</code>中<code>listings</code>的值为<code>false</code></li><li>配置shutdown端口:<code>&lt;Serverport=&quot;未被占用的端口&quot; shutdown=&quot;较为复杂的字符串&quot;&gt;</code></li><li>隐藏Tomcat版本<code>catalina.jar\org\apache\catalina\util\ServerInfo.properties</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.info=需要展现的信息如SmartCity</span><br><span class="line">server.number=SmartCity</span><br><span class="line">server.built=20140101</span><br></pre></td></tr></table></figure></li></ul><h1 id="开机管理"><a href="#开机管理" class="headerlink" title="开机管理"></a>开机管理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install sysv-rc-conf</span><br><span class="line"><span class="meta">#</span>直接加入启动程序，例如把 /etc/init.d/nginx 加入到系统自动 启动列表中：</span><br><span class="line">sudo sysv-rc-conf nginx on   //开启</span><br><span class="line">sudo sysv-rc-conf nginx off  //关闭</span><br></pre></td></tr></table></figure><h1 id="入侵日志分析"><a href="#入侵日志分析" class="headerlink" title="入侵日志分析"></a>入侵日志分析</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>查看登录成功日志过滤自己的ip ,-v 是not</span><br><span class="line">last |grep -v 113.68.65.85</span><br><span class="line"><span class="meta">#</span>查看登录日志,是否有暴力破解</span><br><span class="line">tail -500 /var/log/secure |grep   "Failed password"</span><br><span class="line"><span class="meta">#</span>history日志,查看是不是自己的操作</span><br><span class="line">history</span><br><span class="line"><span class="meta">#</span>查看所有用户</span><br><span class="line">cat /etc/passwd</span><br><span class="line"><span class="meta">#</span>查看1天前修改过的常规文件,看别人删除或者修改你的文件没</span><br><span class="line">find . -type f -mtime -1</span><br><span class="line"><span class="meta">#</span>查看开启的服务</span><br><span class="line">chkconfig --list | grep '3:on'</span><br><span class="line"><span class="meta">#</span>查看进程</span><br><span class="line">ps aux | grep python</span><br><span class="line"><span class="meta">#</span>端口情况</span><br><span class="line">sudo lsof -i</span><br><span class="line">sudo netstat -lptu</span><br><span class="line">sudo netstat -tulpn</span><br><span class="line">sudo netstat -ntlp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看程序启动时间</span><br><span class="line">ps -eo pid,lstart,etime,cmd |grep skynet</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.freebuf.com/articles/web/109001.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/109001.html</a></li><li><a href="https://www.ibm.com/developerworks/cn/aix/library/au-sshlocks/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/aix/library/au-sshlocks/</a></li><li><a href="http://www.centoscn.com/CentOS/config/2015/0503/5347.html" target="_blank" rel="noopener">http://www.centoscn.com/CentOS/config/2015/0503/5347.html</a></li><li><a href="https://www.centos.bz/2012/12/block-port-scan-shell-script/" target="_blank" rel="noopener">https://www.centos.bz/2012/12/block-port-scan-shell-script/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;加固&quot;&gt;&lt;a href=&quot;#加固&quot; class=&quot;headerlink&quot; title=&quot;加固&quot;&gt;&lt;/a&gt;加固&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;CentOS 7防火墙换用Friewalld&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;SSH配置&quot;&gt;&lt;a href=&quot;#SSH配置&quot; class=&quot;headerlink&quot; title=&quot;SSH配置&quot;&gt;&lt;/a&gt;SSH配置&lt;/h1&gt;&lt;h2 id=&quot;安装ssh&quot;&gt;&lt;a href=&quot;#安装ssh&quot; class=&quot;headerlink&quot; title=&quot;安装ssh&quot;&gt;&lt;/a&gt;安装ssh&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service sshd start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;设置开机启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chkconfig ssd on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;重启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service sshd restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;重启网络&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service network restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;centos7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl restart  sshd.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://www.farwmarth.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu,centos 备忘</title>
    <link href="http://www.farwmarth.com/ubuntu%E5%A4%87%E5%BF%98/"/>
    <id>http://www.farwmarth.com/ubuntu备忘/</id>
    <published>2017-01-03T12:13:42.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件:"></a>安装常用软件:</h2><ul><li><code>subversion</code>  svn 版本命令行</li><li><code>lua5.2</code>  lua版本</li><li><code>ssh</code>    ssh 连接</li><li><code>nautilus-open-terminal</code>   终端</li><li><code>fcitx-table-wbpy</code>  五笔</li><li><code>avant-window-navigator</code> 启动器位置</li></ul><a id="more"></a><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 查看版本</span><br><span class="line">cat /etc/issue</span><br><span class="line"><span class="meta">#</span> 修改密码</span><br><span class="line">sudo passwd 用户名</span><br><span class="line"><span class="meta">#</span> 查看端口占用</span><br><span class="line">lsof -i:80</span><br><span class="line"><span class="meta">#</span> 所占端口</span><br><span class="line">netstat -antp | grep  skynet</span><br><span class="line"><span class="meta">#</span> 查看环境变量</span><br><span class="line">env</span><br><span class="line"><span class="meta">#</span> 查看当前系统版本信息</span><br><span class="line">cat /etc/issue</span><br><span class="line"><span class="meta">#</span> 查看端口数据</span><br><span class="line">tcpdump -s 0 -X 'tcp dst port 8888'</span><br><span class="line"><span class="meta">#</span> 卸载程序</span><br><span class="line">sudo dpkg -l sub*</span><br><span class="line">sudo dpkg -r sublime-text</span><br><span class="line"><span class="meta">#</span> 查看磁盘占用 </span><br><span class="line">du -sh /* </span><br><span class="line"><span class="meta">#</span>查找内存rsz为实际内存</span><br><span class="line">ps -e -o 'pid,comm,args,pcpu,rsz,vsz,stime,user,uid' |grep skynet</span><br><span class="line">ps -e -o 'pid,comm,rsz' |grep skynet</span><br><span class="line"><span class="meta">#</span>查找最后多少行信息</span><br><span class="line"> tail -n 50 nohup.out</span><br></pre></td></tr></table></figure><h1 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>按时间反序排序当前文件夹中文件（-r反序）</span><br><span class="line">ls -ltr</span><br><span class="line"><span class="meta">#</span>按时间</span><br><span class="line">ll -t -time-style=full-iso</span><br><span class="line"><span class="meta">#</span>在当前文件夹内查找最近一天内更改的文件（包括子文件夹）：</span><br><span class="line">find . -type f -mtime -1</span><br><span class="line"><span class="meta">#</span>1天以前更改的文件：</span><br><span class="line">find . -type f -mtime +1</span><br><span class="line"><span class="meta">#</span>最近10分钟内状态变化的文件：</span><br><span class="line">find . -type f -cmin -10</span><br><span class="line"><span class="meta">#</span>一天内修改过的文件</span><br><span class="line">find . -atime -1</span><br><span class="line"><span class="meta">#</span>查找指定名字的文件</span><br><span class="line">find . -name "*.xmind"  </span><br><span class="line"><span class="meta">#</span> 按大小查找</span><br><span class="line">find . -size +1000c -print </span><br><span class="line"><span class="meta">#</span>删除目录下所有的pyc</span><br><span class="line">find . -name "*.pyc" -exec rm -f &#123;&#125; \;</span><br><span class="line"><span class="meta">#</span>tree :生成目录结构</span><br><span class="line">tree . -L 1 #设置层次</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>linux 修改时间同步时间</span><br><span class="line">date -s 14:36:00</span><br><span class="line">clock -w</span><br><span class="line">/usr/sbin/ntpdate –u 0.asia.pool.ntp.org</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>按名称查找 </span><br><span class="line">find / -name mysql</span><br><span class="line"><span class="meta">#</span>查看glibc版本</span><br><span class="line">ldd  --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>指定前后行数</span><br><span class="line">cat a.txt |grep -C 5 xx</span><br><span class="line"><span class="meta">#</span>统计字符串出现次数</span><br><span class="line">cat logging.2016-11-19--01-03-29-31812.log |grep -c _recv_pay_data</span><br></pre></td></tr></table></figure><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><ul><li>在Ubuntu下安装jdk 出现./install.sfx.2354: not found无法安装成功<figure class="highlight plain"><figcaption><span>apt-get install g++-multilib ```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 安装</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">sudo chmod u+x jdk-6u23-ea-bin-b03-linux-i586-18_oct_2010.bin   </span><br><span class="line">./jdk-6u23-ea-bin-b03-linux-i586-18_oct_2010.bin  </span><br><span class="line"></span><br><span class="line">sudo gedit ~/.bashrc </span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/home/far/Develop/tools/jdk1.6.0_38 </span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li></ul><h3 id="改变键盘布局ctrl-win"><a href="#改变键盘布局ctrl-win" class="headerlink" title="改变键盘布局ctrl win"></a>改变键盘布局ctrl win</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -e &quot;ctrl:\|:ctrl&quot; /usr/share/X11/xkb/rules/evdev.lst</span><br><span class="line">setxkbmap -option altwin:ctrl_win</span><br><span class="line">setxkbmap -print</span><br></pre></td></tr></table></figure><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pycurl</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">--dabian</span><br><span class="line">sudo yum install gcc python-devel</span><br><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br><span class="line">查看已安装的python模块: help("modules")</span><br></pre></td></tr></table></figure><h3 id="给alias添加命令行参数"><a href="#给alias添加命令行参数" class="headerlink" title="给alias添加命令行参数"></a>给alias添加命令行参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias pc='commit() &#123; git add .; git commit -m "$1"; git push origin source &#125;; commit'</span><br></pre></td></tr></table></figure><h3 id="putty"><a href="#putty" class="headerlink" title="putty"></a>putty</h3><ul><li>上传文件<figure class="highlight plain"><figcaption><span>-P 端口号 -l 用户 -r 本地路径  服务器ip:服务器目录</span></figcaption><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">+ 备份 PuTTY 配置文件</span><br></pre></td></tr></table></figure></li></ul><p>开始-&gt;运行(Win+R)-&gt;regedit 找到 HKEY_CURRENT_USER/Software/SimonTatham 在 SimonTatham 这个节点上点击右键，选择导出，保存即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ putty在登录之后自动切换到目录</span><br><span class="line">```shell</span><br><span class="line">ssh---&gt;remote command 添加</span><br><span class="line">cd /my/path ; /bin/bash</span><br></pre></td></tr></table></figure></p><h2 id="ubuntu-常见问题"><a href="#ubuntu-常见问题" class="headerlink" title="ubuntu 常见问题"></a>ubuntu 常见问题</h2><h3 id="Ubuntu无法找到add-apt-repository问题的解决方法"><a href="#Ubuntu无法找到add-apt-repository问题的解决方法" class="headerlink" title="Ubuntu无法找到add-apt-repository问题的解决方法"></a>Ubuntu无法找到add-apt-repository问题的解决方法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install python-software-properties</span><br><span class="line">apt-get install software-properties-common</span><br></pre></td></tr></table></figure><h3 id="应用菜单栏消失"><a href="#应用菜单栏消失" class="headerlink" title="应用菜单栏消失"></a>应用菜单栏消失</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">initctl restart unity-panel-service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装常用软件&quot;&gt;&lt;a href=&quot;#安装常用软件&quot; class=&quot;headerlink&quot; title=&quot;安装常用软件:&quot;&gt;&lt;/a&gt;安装常用软件:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;subversion&lt;/code&gt;  svn 版本命令行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lua5.2&lt;/code&gt;  lua版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh&lt;/code&gt;    ssh 连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nautilus-open-terminal&lt;/code&gt;   终端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fcitx-table-wbpy&lt;/code&gt;  五笔&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avant-window-navigator&lt;/code&gt; 启动器位置&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://www.farwmarth.com/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://www.farwmarth.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>国内源</title>
    <link href="http://www.farwmarth.com/%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    <id>http://www.farwmarth.com/国内源/</id>
    <published>2016-12-18T15:20:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>清华大学的源太全面了:<br><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a></p><h1 id="pypi"><a href="#pypi" class="headerlink" title="pypi"></a>pypi</h1><p>镜像状态监控: <a href="https://www.pypi-mirrors.org/" target="_blank" rel="noopener">https://www.pypi-mirrors.org/</a></p><ul><li>豆瓣:<a href="http://pypi.douban.com/" target="_blank" rel="noopener">http://pypi.douban.com/</a> </li><li>中国科学技术大学:<a href="http://pypi.mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/</a>  </li><li>阿里云:<a href="http://mirrors.aliyun.com/pypi/simple" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple</a></li></ul><p>临时使用: </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -i https://&lt;mirror&gt;/simple &lt;package&gt;</span><br></pre></td></tr></table></figure><p>全局设置:<br>添加到<code>~/.pip/pip.conf</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://&lt;mirror&gt;/simple</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Brew"><a href="#Brew" class="headerlink" title="Brew"></a>Brew</h1><h2 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install proxychains-ng</span><br><span class="line">vim /usr/local/Cellar/proxychains-ng/4.11/etc/proxychains.conf  </span><br><span class="line"># 将最后一行的 socks4 127.0.0.1 9095 改成 </span><br><span class="line">socks5  127.0.0.1 1080  # 这个端口大家都懂什么意思吧</span><br><span class="line">proxychains4 brew install xxxxxxx</span><br></pre></td></tr></table></figure><h2 id="http-ban-ninja"><a href="#http-ban-ninja" class="headerlink" title="http://ban.ninja/"></a><a href="http://ban.ninja/" target="_blank" rel="noopener">http://ban.ninja/</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置环境变量 HOMEBREW_BOTTLE_DOMAIN 即可使用本镜像源加速下载 Homebrew 资源。</span><br><span class="line"># bash</span><br><span class="line"># 在 ~/.bashrc 中加入</span><br><span class="line">export HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com</span><br><span class="line"># fish</span><br><span class="line"># 在 ~/.config/fish/config.fish 中加入</span><br><span class="line">set -x HOMEBREW_BOTTLE_DOMAIN http://7xkcej.dl1.z0.glb.clouddn.com</span><br></pre></td></tr></table></figure><h2 id="清华大学开源软件镜像站"><a href="#清华大学开源软件镜像站" class="headerlink" title="清华大学开源软件镜像站"></a>清华大学开源软件镜像站</h2><p>替换现有的git</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">cd /usr/local/Library/Taps/homebrew/homebrew-core</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>使用homebrew-science或者homebrew-python</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/Library/Taps/homebrew/homebrew-science</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-science.git</span><br><span class="line"></span><br><span class="line">cd /usr/local/Library/Taps/homebrew/homebrew-python</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-python.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h3 id="Homebrew-bottles"><a href="#Homebrew-bottles" class="headerlink" title="Homebrew-bottles"></a>Homebrew-bottles</h3><p>Homebrew-bottles 镜像使用帮助<br>注:该镜像是 Homebrew 二进制预编译包的镜像。本镜像站同时提供 Homebrew 的 formula 索引的镜像（即 brew update 时所更新内容），请参考 Homebrew 镜像使用帮助。</p><p>临时替换</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles</span><br></pre></td></tr></table></figure><p>长期替换</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="coding-net"><a href="#coding-net" class="headerlink" title="coding.net"></a>coding.net</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local &amp;&amp; git remote set-url origin https://git.coding.net/homebrew/homebrew.git</span><br><span class="line">cd $home &amp;&amp; brew update</span><br></pre></td></tr></table></figure><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><p>(<a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">https://github.com/yarnpkg/yarn</a>)</p><p>淘宝源</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn config set registry 'https://registry.npm.taobao.org'</span><br></pre></td></tr></table></figure><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p>临时使用<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install</span><br></pre></td></tr></table></figure></p><p>默认使用<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm set registry https://registry.npm.taobao.org</span><br><span class="line">或编辑 ~/.npmrc 添加</span><br></pre></td></tr></table></figure></p><p>安装淘宝的cnpm<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><h1 id="git-proxy"><a href="#git-proxy" class="headerlink" title="git proxy"></a>git proxy</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置</span><br><span class="line">git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos;</span><br><span class="line">git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;</span><br><span class="line">#取消</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h2 id="使用proxychains4"><a href="#使用proxychains4" class="headerlink" title="使用proxychains4"></a>使用proxychains4</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装</span><br><span class="line">brew install proxychains-ng</span><br><span class="line">#编译代理地址</span><br><span class="line">vim /usr/local/etc/proxychains.conf</span><br><span class="line">｀http xxx.com 8080｀</span><br><span class="line">#设置别名</span><br><span class="line">alias pc=&quot;proxychains4&quot;</span><br><span class="line">#使用</span><br><span class="line">pc git clone xxx.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;清华大学的源太全面了:&lt;br&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mirrors.tuna.tsinghua.edu.cn/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;pypi&quot;&gt;&lt;a href=&quot;#pypi&quot; class=&quot;headerlink&quot; title=&quot;pypi&quot;&gt;&lt;/a&gt;pypi&lt;/h1&gt;&lt;p&gt;镜像状态监控: &lt;a href=&quot;https://www.pypi-mirrors.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.pypi-mirrors.org/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;豆瓣:&lt;a href=&quot;http://pypi.douban.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pypi.douban.com/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;中国科学技术大学:&lt;a href=&quot;http://pypi.mirrors.ustc.edu.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pypi.mirrors.ustc.edu.cn/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;阿里云:&lt;a href=&quot;http://mirrors.aliyun.com/pypi/simple&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.aliyun.com/pypi/simple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;临时使用: &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install -i https://&amp;lt;mirror&amp;gt;/simple &amp;lt;package&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;全局设置:&lt;br&gt;添加到&lt;code&gt;~/.pip/pip.conf&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[global]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index-url = https://&amp;lt;mirror&amp;gt;/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="soft" scheme="http://www.farwmarth.com/categories/soft/"/>
    
    
      <category term="npm" scheme="http://www.farwmarth.com/tags/npm/"/>
    
      <category term="pypi" scheme="http://www.farwmarth.com/tags/pypi/"/>
    
  </entry>
  
  <entry>
    <title>域名解析的一些概念</title>
    <link href="http://www.farwmarth.com/a%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.farwmarth.com/a记录/</id>
    <published>2016-12-18T11:10:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>##概念</p><ul><li><p>A记录（IP指向）<br>用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器找到相应网页的功能。<br>说明：指向的目标主机地址类型只能使用IP地址。</p></li><li><p>CNAME（别名指向）</p></li></ul><p>通常称别名指向。您可以为一个主机设置别名。相当于用子域名来代替ip地址，优点是如果ip地址变化，只需要改动子域名的解析，而不需要逐一改变ip地址解析。</p><pre><code>1. CNAME的目标主机地址只能使用主机名，不能使用IP地址；2. 主机名前不能有任何其他前缀，如：http://等是不被允许的；3. A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。</code></pre><a id="more"></a><ul><li>MX记录</li></ul><p>邮件交换记录。用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。<br>说明：</p><pre><code>1. MX记录可以使用主机名或IP地址；2. MX记录可以通过设置优先级实现主辅服务器设置，&quot;优先级&quot;中的数字越小表示级别越高。也可以使用相同优先级达到负载均衡的目的；3. 如果在&quot;主机名&quot;中填入子域名则此MX记录只对该子域名生效。</code></pre><ul><li>NS记录（Name Server）</li></ul><p>是域名服务器记录。用来表明由哪台服务器对该域名进行解析。您注册域名时，总有默认的DNS服务器，每个注册的域名都是由一个DNS域名服务器来进行解析的，DNS服务器NS记录地址一般以以下的形式出现：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ns1.domain.com</span><br><span class="line">ns2.domain.com</span><br></pre></td></tr></table></figure></p><p>说明：</p><pre><code>1. &quot;优先级&quot;中的数字越小表示级别越高；2. &quot;IP地址/主机名&quot;中既可以填写IP地址，也可以填写像ns.mydomain.com这样的主机地址，但必须保证该主机地址有效。如，将 news.mydomain.com的NS记录指向到ns.mydomain.com，在设置NS记录的同时还需要设置ns.mydomain.com的 指向，否则NS记录将无法正常解析；3. NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A记录（IP指向）&lt;br&gt;用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器找到相应网页的功能。&lt;br&gt;说明：指向的目标主机地址类型只能使用IP地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CNAME（别名指向）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常称别名指向。您可以为一个主机设置别名。相当于用子域名来代替ip地址，优点是如果ip地址变化，只需要改动子域名的解析，而不需要逐一改变ip地址解析。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. CNAME的目标主机地址只能使用主机名，不能使用IP地址；
2. 主机名前不能有任何其他前缀，如：http://等是不被允许的；
3. A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="domain" scheme="http://www.farwmarth.com/tags/domain/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS 6.X 上升级 Python为 2.7</title>
    <link href="http://www.farwmarth.com/%E5%8D%87%E7%BA%A7centos%E4%B8%8A%E7%9A%84python/"/>
    <id>http://www.farwmarth.com/升级centos上的python/</id>
    <published>2016-12-18T04:20:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>CentOS 6.X 自带的python版本是 2.6 , 但是2.6已经被不被官方支持了，今天写后台程序放到阿里云上运行发现2.6的一些api和2.7不一样了。于是想升级下python</code></pre><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y zlib-devel bzip2-devel openssl-devel xz-libs wget</span><br></pre></td></tr></table></figure><h2 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://www.python.org/ftp/python/2.7.8/Python-2.7.8.tar.xz</span><br><span class="line"># 可以使用国内的源</span><br><span class="line">wget http://mirrors.sohu.com/python/2.7.8/Python-2.7.8.tar.xz</span><br><span class="line">xz -d Python-2.7.8.tar.xz</span><br><span class="line">tar -xvf Python-2.7.8.tar</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装详情："><a href="#安装详情：" class="headerlink" title="安装详情："></a>安装详情：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入目录:</span><br><span class="line">cd Python-2.7.8</span><br><span class="line"># 运行配置 configure:</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line"># 编译安装:</span><br><span class="line">make</span><br><span class="line">make altinstall</span><br><span class="line"># 检查 Python 版本:</span><br><span class="line">[root@dbmasterxxx ~]# python2.7 -V</span><br><span class="line">Python 2.7.8</span><br></pre></td></tr></table></figure><h2 id="链接python"><a href="#链接python" class="headerlink" title="链接python"></a>链接python</h2><p>为了使我们刚安装的<code>2.7.8</code> 生效要么加入<code>PATH</code>目录要么进入软连接：</p><h3 id="加入PATH"><a href="#加入PATH" class="headerlink" title="加入PATH"></a>加入PATH</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/bin:$PATH&quot;</span><br></pre></td></tr></table></figure><h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#如果连接时提示错误“ln: creating symbolic link `/usr/bin/python&apos;: File exists”则先改名</span><br><span class="line">mv /usr/bin/python /usr/bin/python2.6</span><br><span class="line">ln -s /usr/local/bin/python2.7  /usr/bin/python</span><br></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@dbmasterxxx ~]# python -V</span><br><span class="line">Python 2.7.8</span><br><span class="line">[root@dbmasterxxx ~]# which python </span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure><h2 id="安装-setuptools"><a href="#安装-setuptools" class="headerlink" title="安装 setuptools"></a>安装 setuptools</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#获取软件包</span><br><span class="line">wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz</span><br><span class="line"># 解压:</span><br><span class="line">tar -xvf setuptools-1.4.2.tar.gz</span><br><span class="line">cd setuptools-1.4.2</span><br><span class="line"># 使用 Python 2.7.8 安装 setuptools</span><br><span class="line">python2.7 setup.py install</span><br></pre></td></tr></table></figure><h2 id="安装-PIP"><a href="#安装-PIP" class="headerlink" title="安装 PIP"></a>安装 PIP</h2><p><code>curl  https://bootstrap.pypa.io/get-pip.py | python2.7 -</code></p><h2 id="修复-yum-工具"><a href="#修复-yum-工具" class="headerlink" title="修复 yum 工具"></a>修复 yum 工具</h2><p>此时yum应该是失效的，因为此时默认python版本已经是2.7了。而yum需要的是2.6 所以：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改 yum中的python </span><br><span class="line">将第一行  #!/usr/bin/python  改为 #!/usr/bin/python2.6</span><br></pre></td></tr></table></figure><h2 id="安装sqlite3"><a href="#安装sqlite3" class="headerlink" title="安装sqlite3"></a>安装sqlite3</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install sqlite-devel</span><br><span class="line">pip install pysqlite</span><br><span class="line"><span class="meta">#</span>重新编译python</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;CentOS 6.X 自带的python版本是 2.6 , 但是2.6已经被不被官方支持了，今天写后台程序放到阿里云上运行发现2.6的一些api和2.7不一样了。于是想升级下python
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;安装依赖包&quot;&gt;&lt;a href=&quot;#安装依赖包&quot; class=&quot;headerlink&quot; title=&quot;安装依赖包&quot;&gt;&lt;/a&gt;安装依赖包&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y zlib-devel bzip2-devel openssl-devel xz-libs wget&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;源码编译&quot;&gt;&lt;a href=&quot;#源码编译&quot; class=&quot;headerlink&quot; title=&quot;源码编译&quot;&gt;&lt;/a&gt;源码编译&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://www.python.org/ftp/python/2.7.8/Python-2.7.8.tar.xz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 可以使用国内的源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget http://mirrors.sohu.com/python/2.7.8/Python-2.7.8.tar.xz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xz -d Python-2.7.8.tar.xz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xvf Python-2.7.8.tar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="centos" scheme="http://www.farwmarth.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>给Iphone换个自定义的铃声</title>
    <link href="http://www.farwmarth.com/%E7%BB%99Iphone%E6%8D%A2%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%93%83%E5%A3%B0/"/>
    <id>http://www.farwmarth.com/给Iphone换个自定义的铃声/</id>
    <published>2016-12-18T04:20:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>iPhone的铃声格式是m4r格式，普通的mp3无法直接设置为铃声,所以需要使用铃声制作工具来转换,一般电话铃声的最长时长设置为40s,闹钟的时长最长为30s</p><h1 id="制作工具"><a href="#制作工具" class="headerlink" title="制作工具"></a>制作工具</h1><h2 id="Ringer制作铃声"><a href="#Ringer制作铃声" class="headerlink" title="Ringer制作铃声"></a>Ringer制作铃声</h2><p>Ringer是Mac上制作铃声的工具,操作非常简单,将下载的歌曲播放到Ringer的主界面</p><ul><li>大音轨用于精确控制,双击大的音轨可以从点击处开始播放,设置头尾的Preview可以听整个铃声,下面的小音轨用来快速拖动预览声音</li><li>可以制作两种:铃声和立名声音,没发现太大的区别只是最大时长不一样</li><li>FadeOut/FadeIn : 为铃声添加淡入淡出效果</li><li>设置好后点击Create按钮即可将制作好的铃声自动导入到Itunes中</li></ul><a id="more"></a><p><img src="http://farwmarth.bestnewbee.com/images/ringer.png" alt="ringe"></p><h2 id="Itools制作铃声"><a href="#Itools制作铃声" class="headerlink" title="Itools制作铃声"></a>Itools制作铃声</h2><p><img src="http://farwmarth.bestnewbee.com/images/itools_ring.png" alt="ringe"></p><h2 id="Itunes制作铃声"><a href="#Itunes制作铃声" class="headerlink" title="Itunes制作铃声"></a>Itunes制作铃声</h2><p>其实Itunes也可以制作铃声,步骤稍微繁琐一些.<br><img src="http://farwmarth.bestnewbee.com/images/2016-12-18%2020.25.27.png" alt="屏幕快照 2016-12-18 20.25.27"></p><p>在显示简介界面来截取铃声长度,如果要预览可以点击确定,在itunes上面的播放区播放预览<br><img src="http://farwmarth.bestnewbee.com/images/2016-12-18%2020.32.17.png" alt="屏幕快照 2016-12-18 20.32.17"><br><img src="http://farwmarth.bestnewbee.com/images/2016-12-18%2020.32.51.png" alt="屏幕快照 2016-12-18 20.32.51"></p><p>转换AAC版本在新版在itunes中移动了位置，并不在右键菜单中,而在文件菜单<br><img src="http://farwmarth.bestnewbee.com/images/2016-12-18%2020.33.20.png" alt="屏幕快照 2016-12-18 20.33.20"></p><p><img src="http://farwmarth.bestnewbee.com/images/2016-12-18%2020.33.51.png" alt="屏幕快照 2016-12-18 20.33.51"></p><p>转换好后签名为m4r<br><img src="http://farwmarth.bestnewbee.com/images/2016-12-18%2020.38.38.png" alt="屏幕快照 2016-12-18 20.38.38"></p><p>切换到铃声选项<br><img src="http://farwmarth.bestnewbee.com/images/2016-12-18%2020.39.22.png" alt="屏幕快照 2016-12-18 20.39.22"></p><p>将刚才重命名的m4r文件添加资料库中,如果是在itnues音乐目录下直接改名的可能要移动到桌面或其他位置，不然会出现相同名字而导入失败<br><img src="http://farwmarth.bestnewbee.com/images/2016-12-18%2020.40.07.png" alt="屏幕快照 2016-12-18 20.40.07"></p><p><img src="http://farwmarth.bestnewbee.com/images/2016-12-18%2021.04.34.png" alt="屏幕快照 2016-12-18 21.04.34"></p><h1 id="Itunes同步"><a href="#Itunes同步" class="headerlink" title="Itunes同步"></a>Itunes同步</h1><p><img src="http://farwmarth.bestnewbee.com/images/2016-12-18_13-54-31_.png" alt="Voila_Capture 2016-12-18_13-54-31_"><br><img src="http://farwmarth.bestnewbee.com/images/2016-12-18_13-56-22_.png" alt="Voila_Capture 2016-12-18_13-56-22_"></p><h1 id="Iphone上的铃声制作软件"><a href="#Iphone上的铃声制作软件" class="headerlink" title="Iphone上的铃声制作软件"></a>Iphone上的铃声制作软件</h1><p>iphone上在线下载设置铃声的软件不在少数,制作铃声的却寥寥无几。<br>目前只找到了这个：<br><a href="https://itunes.apple.com/cn/app/shou-ji-ling-sheng-mian-fei-ban/id435945279?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/shou-ji-ling-sheng-mian-fei-ban/id435945279?mt=8</a><br>可以下载搜索并且自己裁剪铃声，但是有广告，体验也不是太好</p><h1 id="设置铃声"><a href="#设置铃声" class="headerlink" title="设置铃声"></a>设置铃声</h1><p> 同步成功后在iphone的铃声设置界面可以找到刚才我们自己制作的铃声</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;iPhone的铃声格式是m4r格式，普通的mp3无法直接设置为铃声,所以需要使用铃声制作工具来转换,一般电话铃声的最长时长设置为40s,闹钟的时长最长为30s&lt;/p&gt;
&lt;h1 id=&quot;制作工具&quot;&gt;&lt;a href=&quot;#制作工具&quot; class=&quot;headerlink&quot; title=&quot;制作工具&quot;&gt;&lt;/a&gt;制作工具&lt;/h1&gt;&lt;h2 id=&quot;Ringer制作铃声&quot;&gt;&lt;a href=&quot;#Ringer制作铃声&quot; class=&quot;headerlink&quot; title=&quot;Ringer制作铃声&quot;&gt;&lt;/a&gt;Ringer制作铃声&lt;/h2&gt;&lt;p&gt;Ringer是Mac上制作铃声的工具,操作非常简单,将下载的歌曲播放到Ringer的主界面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大音轨用于精确控制,双击大的音轨可以从点击处开始播放,设置头尾的Preview可以听整个铃声,下面的小音轨用来快速拖动预览声音&lt;/li&gt;
&lt;li&gt;可以制作两种:铃声和立名声音,没发现太大的区别只是最大时长不一样&lt;/li&gt;
&lt;li&gt;FadeOut/FadeIn : 为铃声添加淡入淡出效果&lt;/li&gt;
&lt;li&gt;设置好后点击Create按钮即可将制作好的铃声自动导入到Itunes中&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="soft" scheme="http://www.farwmarth.com/categories/soft/"/>
    
      <category term="life" scheme="http://www.farwmarth.com/categories/soft/life/"/>
    
    
      <category term="iphone" scheme="http://www.farwmarth.com/tags/iphone/"/>
    
      <category term="skill" scheme="http://www.farwmarth.com/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>如何避免一些危险的指令操作</title>
    <link href="http://www.farwmarth.com/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%B8%80%E4%BA%9B%E5%8D%B1%E9%99%A9%E7%9A%84%E6%8C%87%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.farwmarth.com/如何避免一些危险的指令操作/</id>
    <published>2016-11-29T03:07:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git引发的事故"><a href="#git引发的事故" class="headerlink" title="git引发的事故"></a>git引发的事故</h1><p>上周服务器的一位同事一个不小心用了<code>git push -f</code>,抹掉了我们一上午的工作内容,还好抹掉的记录不是太多大概八九条.<br>各自花了大概半小时恢复了数据</p><h2 id="恢复过程"><a href="#恢复过程" class="headerlink" title="恢复过程"></a>恢复过程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>查看所有的本地操作数据</span><br><span class="line">git reflog</span><br><span class="line"><span class="meta">#</span>或者查看所有数据,找到被抹掉的commit</span><br><span class="line">git log -g</span><br><span class="line"><span class="meta">#</span>复制一个提交节点并在当前分支做一次完全一样的新提交。</span><br><span class="line">git cherry-pick commit_id</span><br></pre></td></tr></table></figure><a id="more"></a><p>可以看出强制提交这个命令的危险性,如何来禁止强制呢?</p><h2 id="禁止强制推送"><a href="#禁止强制推送" class="headerlink" title="禁止强制推送"></a>禁止强制推送</h2><h3 id="本地禁止强制推送"><a href="#本地禁止强制推送" class="headerlink" title="本地禁止强制推送"></a>本地禁止强制推送</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global receive.denyNonFastForwards true</span><br><span class="line">git config --global receive.denyDeletes true</span><br></pre></td></tr></table></figure><h3 id="hook方式"><a href="#hook方式" class="headerlink" title="hook方式"></a>hook方式</h3><p><a href="https://gist.github.com/stefansundin/d465f1e331fc5c632088" target="_blank" rel="noopener">https://gist.github.com/stefansundin/d465f1e331fc5c632088</a></p><h3 id="gitbucket-远程仓库禁止强制推送"><a href="#gitbucket-远程仓库禁止强制推送" class="headerlink" title="gitbucket 远程仓库禁止强制推送"></a>gitbucket 远程仓库禁止强制推送</h3><p>gitbucket提供了分支权限配置: <a href="https://confluence.atlassian.com/bitbucketserver/stash-3-10-release-notes-776640856.html" target="_blank" rel="noopener">参考</a></p><p><code>Rewriting history</code> 就是防止强制推送</p><p><img src="https://confluence.atlassian.com/bitbucketserver/files/776640856/776640857/1/1433804733697/STASH310_branch_permissions.png" alt=""></p><h3 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h3><p><a href="https://help.github.com/articles/configuring-protected-branches/" target="_blank" rel="noopener">https://help.github.com/articles/configuring-protected-branches/</a></p><p><img src="http://farwmarth.bestnewbee.com/images/git_push_force.png" alt=""></p><h3 id="gitlab配置"><a href="#gitlab配置" class="headerlink" title="gitlab配置"></a>gitlab配置</h3><p><a href="https://about.gitlab.com/2014/11/26/keeping-your-code-protected/" target="_blank" rel="noopener">https://about.gitlab.com/2014/11/26/keeping-your-code-protected/</a></p><p><img src="https://about.gitlab.com/images/protected_branches.png" alt=""></p><h1 id="强制删除rm-rf"><a href="#强制删除rm-rf" class="headerlink" title="强制删除rm -rf"></a>强制删除<code>rm -rf</code></h1><p>mac下可以用zsh这样的终端<code>rm -rf /</code>会有二次确认</p><h3 id="trash-cli"><a href="#trash-cli" class="headerlink" title="trash-cli"></a>trash-cli</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>https://github.com/andreafrancia/trash-cli</span><br><span class="line">easy_install trash-cli</span><br></pre></td></tr></table></figure><h3 id="rmtrash"><a href="#rmtrash" class="headerlink" title="rmtrash"></a>rmtrash</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install rmtrash</span><br><span class="line"><span class="meta">#</span>配置</span><br><span class="line">alias rm="rmtrash"</span><br><span class="line">alias rmdir="rmdirtrash"</span><br></pre></td></tr></table></figure><h3 id="mv替代rm"><a href="#mv替代rm" class="headerlink" title="mv替代rm"></a>mv替代rm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.trash</span><br><span class="line">alias rm=trash  </span><br><span class="line">alias r=trash  </span><br><span class="line">alias rl="ls ~/.trash"</span><br><span class="line">alias ur=undelfile</span><br><span class="line">undelfile()</span><br><span class="line">&#123;</span><br><span class="line">  mv -i ~/.trash/$@ ./</span><br><span class="line">&#125;</span><br><span class="line">trash()</span><br><span class="line">&#123;  </span><br><span class="line">  mv $@ ~/.trash/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git引发的事故&quot;&gt;&lt;a href=&quot;#git引发的事故&quot; class=&quot;headerlink&quot; title=&quot;git引发的事故&quot;&gt;&lt;/a&gt;git引发的事故&lt;/h1&gt;&lt;p&gt;上周服务器的一位同事一个不小心用了&lt;code&gt;git push -f&lt;/code&gt;,抹掉了我们一上午的工作内容,还好抹掉的记录不是太多大概八九条.&lt;br&gt;各自花了大概半小时恢复了数据&lt;/p&gt;
&lt;h2 id=&quot;恢复过程&quot;&gt;&lt;a href=&quot;#恢复过程&quot; class=&quot;headerlink&quot; title=&quot;恢复过程&quot;&gt;&lt;/a&gt;恢复过程&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;查看所有的本地操作数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reflog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;或者查看所有数据,找到被抹掉的commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;复制一个提交节点并在当前分支做一次完全一样的新提交。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git cherry-pick commit_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hook" scheme="http://www.farwmarth.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>权重随机算法</title>
    <link href="http://www.farwmarth.com/%E6%9D%83%E9%87%8D%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    <id>http://www.farwmarth.com/权重随机算法/</id>
    <published>2016-10-10T11:10:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>带权随机算法在游戏开发中应用广泛,最近在做商店随机商品又遇到这种问题,重新思考并总结了一下带权随机的做法.</p><p>带权随机其实很好理解<br>比如我们希望抽到A的抽到的比重是10,B的比重是5,C的比重是1,如下图<br><img src="http://farwmarth.bestnewbee.com/images/044TM313-0.jpg" alt="044TM313"></p><a id="more"></a><h2 id="权重和计算"><a href="#权重和计算" class="headerlink" title="权重和计算"></a>权重和计算</h2><p>常规做法是计算权重总和sum，然后在1到sum之间随机选择一个数R，之后遍历整个集合，统计遍历的项的权重之和，如果大于等于R，就停止遍历，选择遇到的项<br>好处:没有额外的空间占用，算法也比较简单。<br>坏处:选取的时候要遍历集合，时间复杂度是O（n）。</p><h3 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">math</span>.<span class="built_in">randomseed</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span><span class="params">(rules, count)</span></span></span><br><span class="line">    <span class="keyword">local</span> ret = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> total_weight = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(rules) <span class="keyword">do</span></span><br><span class="line">        total_weight = total_weight + v.weight</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>, count <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> rd = <span class="built_in">math</span>.<span class="built_in">random</span>(total_weight)</span><br><span class="line">        <span class="keyword">for</span> _, rule <span class="keyword">in</span> <span class="built_in">ipairs</span>(rules) <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> rd &lt;= rule.weight <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">table</span>.<span class="built_in">insert</span>(ret, rule.item)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rd = rd - rule.weight</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">weight_unique_pick_one</span><span class="params">(rules, count)</span></span></span><br><span class="line">    <span class="keyword">local</span> ret = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_total_weight</span><span class="params">( rules )</span></span></span><br><span class="line">        <span class="keyword">local</span> total_weight = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(rules) <span class="keyword">do</span></span><br><span class="line">            total_weight = total_weight + v.weight</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> total_weight</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> total_weight =get_total_weight(rules)</span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>, count <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> rd = <span class="built_in">math</span>.<span class="built_in">random</span>(total_weight)</span><br><span class="line">        <span class="keyword">for</span> index, rule <span class="keyword">in</span> <span class="built_in">ipairs</span>(rules) <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> rd &lt;= rule.weight <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">table</span>.<span class="built_in">insert</span>(ret, rule.item)</span><br><span class="line">                <span class="built_in">table</span>.<span class="built_in">remove</span>(rules, index)</span><br><span class="line">                total_weight =get_total_weight(rules)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rd = rd - rule.weight</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--test</span></span><br><span class="line"><span class="keyword">local</span> ret = weight_unique_pick_one(&#123;&#123;item=<span class="number">1</span>,weight=<span class="number">1</span>&#125;,&#123;item=<span class="number">2</span>,weight=<span class="number">50</span>&#125;,&#123;item=<span class="number">3</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">4</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">5</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">6</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">7</span>,weight=<span class="number">50</span>&#125;,&#123;item=<span class="number">8</span>,weight=<span class="number">4</span>&#125;&#125;,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------------------"</span>)</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(ret) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="按照权重排序优化"><a href="#按照权重排序优化" class="headerlink" title="按照权重排序优化"></a>按照权重排序优化</h3><p>对项目集按照权重排序。这样遍历的时候，概率高的项排在前面，减少遍历的项。<br>比较{A:5，B:2，C:2，D:1}和{B:2，C:2，A:5，D:1}<br>前者遍历步数的期望是5/10<em>1+2/10</em>2+2/10<em>3+1/10</em>4而后者是2/10<em>1+2/10</em>2+5/10<em>3+1/10</em>4。<br>好处:提高了平均选取速度。<br>坏处:需要进行排序，并且不易添加删除修改项。</p><p>实现很简单将上面的<code>weight_unique_pick_one</code>方法中<code>rules</code>按字段<code>weight</code>做一个高到低排序就可以了<br><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">weight_unique_pick_one</span><span class="params">(rules, count)</span></span></span><br><span class="line">    <span class="keyword">local</span> ret = &#123;&#125;</span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">sort</span>(rules,<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span> <span class="keyword">return</span> b.weight &lt; a.weight <span class="keyword">end</span> )</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="折半查找改进版本"><a href="#折半查找改进版本" class="headerlink" title="折半查找改进版本"></a>折半查找改进版本</h3><p>折半查找的改进方法是将所有项的区间定义头尾,构造一个已排序的区间,然后用二分法加快查找<code>random</code>的区间</p><p>实现如下:<br><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">binsearch</span><span class="params">( t,value )</span></span></span><br><span class="line">    <span class="keyword">local</span> i_start,i_end,i_mid = <span class="number">1</span>,#t,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i_start &lt;= i_end <span class="keyword">do</span></span><br><span class="line">        i_mid = <span class="built_in">math</span>.<span class="built_in">floor</span>( (i_start+i_end)/<span class="number">2</span> )</span><br><span class="line">        <span class="keyword">local</span> value2 =  t[i_mid]</span><br><span class="line">        <span class="keyword">if</span> value == value2 <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> i_mid</span><br><span class="line">        <span class="keyword">elseif</span>  value &gt; value2 <span class="keyword">then</span></span><br><span class="line">            i_end = i_mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i_start = i_mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">bisect_left</span><span class="params">( t,value )</span></span></span><br><span class="line">    <span class="keyword">local</span> i_start,i_end,i_mid = <span class="number">1</span>,#t,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i_start &lt; i_end <span class="keyword">do</span></span><br><span class="line">        i_mid = <span class="built_in">math</span>.<span class="built_in">floor</span>( (i_start+i_end)/<span class="number">2</span> )</span><br><span class="line">        <span class="keyword">local</span> value2 =  t[i_mid]</span><br><span class="line">        <span class="keyword">if</span>  value2 &lt; value <span class="keyword">then</span></span><br><span class="line">            i_start = i_mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i_end = i_mid</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> i_start</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_weight_interval</span><span class="params">( rules )</span></span></span><br><span class="line">    <span class="keyword">local</span> total_weight = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> weight_interval = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(rules) <span class="keyword">do</span></span><br><span class="line">        total_weight = total_weight + v.weight</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(weight_interval,total_weight)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> total_weight,weight_interval</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">weight_unique_pick</span><span class="params">(rules, count)</span></span></span><br><span class="line">    <span class="keyword">local</span> ret = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> total_weight,weight_interval =get_weight_interval(rules)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>, count <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> rd = <span class="built_in">math</span>.<span class="built_in">random</span>(total_weight)</span><br><span class="line">        <span class="keyword">local</span> b_index = bisect_left(weight_interval,rd)</span><br><span class="line">        <span class="keyword">local</span> item = rules[b_index]</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(ret, item.item)</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">remove</span>(rules, b_index)</span><br><span class="line">        total_weight,weight_interval =get_weight_interval(rules)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--test</span></span><br><span class="line"><span class="keyword">local</span> ret = weight_unique_pick(&#123;&#123;item=<span class="number">1</span>,weight=<span class="number">1</span>&#125;,&#123;item=<span class="number">2</span>,weight=<span class="number">100</span>&#125;,&#123;item=<span class="number">3</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">4</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">5</span>,weight=<span class="number">50</span>&#125;&#125;,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------------------"</span>)</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(ret) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="纯算法实现"><a href="#纯算法实现" class="headerlink" title="纯算法实现"></a>纯算法实现</h2><p>算法来源:<br><a href="http://utopia.duth.gr/~pefraimi/research/data/2007EncOfAlg.pdf" target="_blank" rel="noopener">http://utopia.duth.gr/~pefraimi/research/data/2007EncOfAlg.pdf</a><br>参考:<br><a href="http://kanglinxm.blogspot.jp/2013/10/blog-post.html" target="_blank" rel="noopener">http://kanglinxm.blogspot.jp/2013/10/blog-post.html</a></p><p>纯算法实现的关键实现:<br><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _,item <span class="keyword">in</span> <span class="built_in">ipairs</span>(rules) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> u = <span class="built_in">math</span>.<span class="built_in">random</span>();</span><br><span class="line">    <span class="keyword">local</span> w_i = <span class="number">1</span> / item.weight;</span><br><span class="line">    <span class="keyword">local</span> k = <span class="built_in">math</span>.<span class="built_in">pow</span>(u, w_i);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>随机一个<code>0-1</code>之间的小数作为底数,将<code>1/权重</code>作为幂,权重越大,随机数相同时结果越大.将<code>k</code>由大到小排序取前<code>count</code>个即为要随机的个数.这种算法缺点是必须随机所有的项得到随机结果集.</p><p>完整实现:<br><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">weight_unique_math</span><span class="params">(rules, count)</span></span></span><br><span class="line">    <span class="keyword">local</span> ret = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> all_random_weight = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _,item <span class="keyword">in</span> <span class="built_in">ipairs</span>(rules) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> u = <span class="built_in">math</span>.<span class="built_in">random</span>();</span><br><span class="line">        <span class="keyword">local</span> w_i = <span class="number">1</span> / item.weight;</span><br><span class="line">        <span class="keyword">local</span> k = <span class="built_in">math</span>.<span class="built_in">pow</span>(u, w_i);</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(all_random_weight,&#123;item =item.item,random_weight = k&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">sort</span>(all_random_weight,<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span> <span class="keyword">return</span> b.random_weight &lt; a.random_weight <span class="keyword">end</span> )</span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>,count <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> item = all_random_weight[i].item</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(ret,item)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> items = &#123;&#123;item=<span class="number">1</span>,weight=<span class="number">1</span>&#125;,&#123;item=<span class="number">2</span>,weight=<span class="number">50</span>&#125;,&#123;item=<span class="number">3</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">4</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">5</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">6</span>,weight=<span class="number">4</span>&#125;,&#123;item=<span class="number">7</span>,weight=<span class="number">50</span>&#125;,&#123;item=<span class="number">8</span>,weight=<span class="number">4</span>&#125;&#125;</span><br><span class="line"><span class="keyword">local</span> ret = weight_unique_math(items,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(ret) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;带权随机算法在游戏开发中应用广泛,最近在做商店随机商品又遇到这种问题,重新思考并总结了一下带权随机的做法.&lt;/p&gt;
&lt;p&gt;带权随机其实很好理解&lt;br&gt;比如我们希望抽到A的抽到的比重是10,B的比重是5,C的比重是1,如下图&lt;br&gt;&lt;img src=&quot;http://farwmarth.bestnewbee.com/images/044TM313-0.jpg&quot; alt=&quot;044TM313&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随机" scheme="http://www.farwmarth.com/tags/%E9%9A%8F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>readthedocs切换到mkdocs</title>
    <link href="http://www.farwmarth.com/mkdocs/"/>
    <id>http://www.farwmarth.com/mkdocs/</id>
    <published>2016-09-04T04:04:15.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前把学习笔记用<code>sphinx</code>生成然后托管在<code>github</code>上,然后用<code>readthedocs</code>的<code>webhook</code>自动<code>build</code>文章数量渐多感觉排版拥挤.于是google了一下找了个替代品,那就就是这篇文章的主角<code>mkdocs</code></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/mkdocs/mkdocs" target="_blank" rel="noopener">mkdocs</a>是一个支持<code>markdown</code>语法的项目文档管理工具，结构很简单,一个<code>yml</code>配置文件管理文档结构和主题信息,<code>docs</code>目录则是项目文档.官方文档(<a href="http://www.mkdocs.org/" target="_blank" rel="noopener">http://www.mkdocs.org/</a>)</p><a id="more"></a><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>安装mkdocs</span><br><span class="line">pip install mkdocs</span><br><span class="line"><span class="meta">#</span>新建工程目录</span><br><span class="line">mkdocs new my-project</span><br><span class="line"><span class="meta">#</span>切换到工程目录</span><br><span class="line">cd my-project</span><br></pre></td></tr></table></figure><p>工程目录如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── mkdocs.yml</span><br><span class="line">├── docs</span><br><span class="line">│   ├── index.md</span><br></pre></td></tr></table></figure></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>启动服务器,默认端口是8000 Running at: http://127.0.0.1:8000/</span><br><span class="line">mkdocs serve</span><br></pre></td></tr></table></figure><p><img src="http://farwmarth.bestnewbee.com/images/first_mkdocs.png" alt="first_mkdocs"></p><h3 id="所有命令"><a href="#所有命令" class="headerlink" title="所有命令"></a>所有命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>生成html</span><br><span class="line">mkdocs build</span><br><span class="line"><span class="meta">#</span>新建工程目录</span><br><span class="line">mkdocs new my-project</span><br><span class="line"><span class="meta">#</span>部署到github的gh-deploy分支</span><br><span class="line">mkdocs gh-deploy -v</span><br><span class="line"><span class="meta">#</span>markdown生成json文件</span><br><span class="line">mkdocs json</span><br><span class="line"><span class="meta">#</span>启动预览</span><br><span class="line">mkdocs serve</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>我用的主题是<code>material</code>:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install mkdocs-material</span><br></pre></td></tr></table></figure></p><p>项目配置大概列了一,大致分为几部分：<code>项目信息</code>，<code>托管信息</code>，<code>版权信息</code>，<code>主题与文档目录</code>，<code>配色信息</code>,<code>额外插件</code>，还有就是<code>项目文档目录结构</code>有些配置与主题相关<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Project information</span><br><span class="line">site_name: farwmarth’s note</span><br><span class="line">site_author: &apos;farwmarth&apos;</span><br><span class="line">site_url: &apos;http://learndocs.farwmarth.com&apos;</span><br><span class="line"></span><br><span class="line"># Repository</span><br><span class="line"># repo_name: &apos;GitHub&apos;</span><br><span class="line"># repo_url: &apos;https://github.com/wujiyu115/learndocs&apos;</span><br><span class="line"></span><br><span class="line"># Copyright</span><br><span class="line">copyright: &apos;Copyright (c) 2016 farwmarth&apos;</span><br><span class="line"></span><br><span class="line"># Documentation and theme</span><br><span class="line">docs_dir: &apos;docs&apos;</span><br><span class="line">theme: &apos;material&apos;</span><br><span class="line"># theme: &apos;cinder&apos;</span><br><span class="line"></span><br><span class="line">extra:</span><br><span class="line">  palette:</span><br><span class="line">    primary: &apos;blue grey&apos;</span><br><span class="line">    accent: &apos;blue grey&apos;</span><br><span class="line">  author:</span><br><span class="line">    github: &apos;wujiyu115&apos;</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">markdown_extensions:</span><br><span class="line">  #高亮</span><br><span class="line">  - codehilite(css_class=code)</span><br><span class="line">  - admonition</span><br><span class="line">  - toc:</span><br><span class="line">      permalink: &apos;#&apos;</span><br><span class="line"></span><br><span class="line">pages:</span><br><span class="line">- Home: &apos;index.md&apos;</span><br><span class="line">- 数据结构与算法:</span><br><span class="line">    - &apos;排序算法介绍&apos;: &apos;data_algorithms/algorithms1_intro.md&apos;</span><br><span class="line">- c++基础:</span><br><span class="line">    - &apos;c++环境搭建(Win)&apos;: &apos;cplus/cplus_win.md&apos;</span><br><span class="line">    - &apos;编译过程&apos;: &apos;cplus/cplus4_complier.md&apos;</span><br><span class="line">    - &apos;常量修饰符&apos;: &apos;cplus/cplus5_const.md&apos;</span><br><span class="line">- python:</span><br><span class="line">    - &apos;语言简介&apos;: &apos;python/py1_intro.md&apos;</span><br></pre></td></tr></table></figure></p><h2 id="托管到github"><a href="#托管到github" class="headerlink" title="托管到github"></a>托管到github</h2><p>之前误认为<code>github</code>只能有一个<code>page</code>页,看了 <a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="noopener">官方</a>的介绍之后发现并非如此，有两种方式创建<code>page</code>页，一种是创建一个就<code>{username}.github.com</code>的库项目,另一种则是创建任意库项目可以在<code>setting</code>中<code>Launch automatic page generator</code>生成<code>gh-pages</code>分支，创建方式这里就不细说了,可以根据<a href="https://pages.github.com/" target="_blank" rel="noopener">page官方</a>的引导去操作。</p><p>这个表格是<code>username库项目</code>和<code>任意库项项目</code>对应的域名指向.</p><table><thead><tr><th>Type of GitHub Pages site</th><th>Pages default domain &amp; host location on GitHub</th><th>Location of the source files for building your Pages site</th></tr></thead><tbody><tr><td>User Pages site</td><td><code>username.github.io</code></td><td><code>master</code></td></tr><tr><td>Project Pages site owned by a <strong>user account</strong></td><td>、</td><td><code>master</code>, <code>gh-pages</code>, or a <code>/docs</code> folder on <code>master</code></td></tr></tbody></table><p><code>username库项目</code>毫无疑问地址就是<code>username.github.io</code>,<code>任意库项项目</code>生成的工程页则是<code>username.github.io/projectname</code>.<br>我现在的做法是在<code>username库项目</code>下的<code>CNAME</code>指向我的主域名<code>farwmarth.com</code>,<code>learndocs库项项目</code>的<code>CNAME</code>指向我的二级域名<code>learndocs.farwmarth.com</code>.</p><p><code>dnspod</code>配置如下：</p><p><img src="http://farwmarth.bestnewbee.com/images/mkdocscname.png" alt="mkdocscname"></p><p>最后<code>learndocs库项项目</code>源文件托管到<code>master</code>分支,然后<code>mkdocs gh-deploy</code>把生成的<code>html</code>静态页面托管是<code>gh-pages</code>分支。注意<code>master</code>分支把生成的<code>site</code>目录忽略掉<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "site/" &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前把学习笔记用&lt;code&gt;sphinx&lt;/code&gt;生成然后托管在&lt;code&gt;github&lt;/code&gt;上,然后用&lt;code&gt;readthedocs&lt;/code&gt;的&lt;code&gt;webhook&lt;/code&gt;自动&lt;code&gt;build&lt;/code&gt;文章数量渐多感觉排版拥挤.于是google了一下找了个替代品,那就就是这篇文章的主角&lt;code&gt;mkdocs&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mkdocs/mkdocs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mkdocs&lt;/a&gt;是一个支持&lt;code&gt;markdown&lt;/code&gt;语法的项目文档管理工具，结构很简单,一个&lt;code&gt;yml&lt;/code&gt;配置文件管理文档结构和主题信息,&lt;code&gt;docs&lt;/code&gt;目录则是项目文档.官方文档(&lt;a href=&quot;http://www.mkdocs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.mkdocs.org/&lt;/a&gt;)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NodeJs初探</title>
    <link href="http://www.farwmarth.com/node/"/>
    <id>http://www.farwmarth.com/node/</id>
    <published>2016-08-12T11:10:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="mac-node使用"><a href="#mac-node使用" class="headerlink" title="mac node使用"></a>mac node使用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>安装</span><br><span class="line">brew install node</span><br><span class="line"><span class="meta">#</span>升级node</span><br><span class="line">brew upgrade node</span><br></pre></td></tr></table></figure><h4 id="linux-node"><a href="#linux-node" class="headerlink" title="linux node"></a>linux node</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>ubuntu安装6.x</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"><span class="meta">#</span>升级node</span><br><span class="line">npm install -g n</span><br><span class="line">n stable</span><br><span class="line"><span class="meta">#</span>升级npm</span><br><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h4 id="nodejs常用命令"><a href="#nodejs常用命令" class="headerlink" title="nodejs常用命令"></a>nodejs常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>查看版本</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><h4 id="创建最简单的webserver"><a href="#创建最简单的webserver" class="headerlink" title="创建最简单的webserver"></a>创建最简单的webserver</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span>;</span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</span><br><span class="line">  res.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(port, hostname, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="断言-assert"><a href="#断言-assert" class="headerlink" title="断言(assert)"></a>断言(assert)</h4><p>当需要在一个值为FALSE时中断当前操作的话，可以使用断言<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> assert  = <span class="built_in">require</span> (<span class="string">"assert"</span>)</span><br><span class="line">assert(<span class="literal">true</span>)<span class="comment">//成功</span></span><br><span class="line">assert(<span class="number">1</span>)<span class="comment">//成功</span></span><br><span class="line">assert(<span class="literal">false</span>,<span class="string">"it's false"</span>)<span class="comment">//触发断言</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//deepEqual用于比较对象的属性是否相等,但会忽略原型链上的属性,原始值使用==</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  a : &#123;</span><br><span class="line">    b : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  a : &#123;</span><br><span class="line">    b : <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;</span><br><span class="line">  a : &#123;</span><br><span class="line">    b : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj4 = <span class="built_in">Object</span>.create(obj1);</span><br><span class="line"></span><br><span class="line">assert.deepEqual(obj1, obj1);</span><br><span class="line"><span class="comment">//同一对象成功</span></span><br><span class="line">assert.deepEqual(obj1, obj2);</span><br><span class="line"><span class="comment">//失败,对象值不相等</span></span><br><span class="line">assert.deepEqual(obj1, obj3);</span><br><span class="line"><span class="comment">//成功,值相等</span></span><br><span class="line">assert.deepEqual(obj1, obj4);</span><br><span class="line"><span class="comment">//失败,忽略原型链上的值</span></span><br></pre></td></tr></table></figure></p><h4 id="node-base64"><a href="#node-base64" class="headerlink" title="node base64"></a>node base64</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Buffer(<span class="string">"Hello World"</span>).toString(<span class="string">'base64'</span>));</span><br><span class="line">&lt;!--SGVsbG8gV29ybGQ=--&gt;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Buffer(<span class="string">"SGVsbG8gV29ybGQ="</span>, <span class="string">'base64'</span>).toString(<span class="string">'ascii'</span>))</span><br><span class="line">&lt;!--Hello World--&gt;</span><br></pre></td></tr></table></figure><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>NPM的全称是Node Package Manager，如ruby的gem，Python的PyPL、setuptools，PHP的pear，NPM就是Nodejs的包管理器</p><h3 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>版本</span><br><span class="line">npm -v</span><br><span class="line"><span class="meta">#</span>升级模块</span><br><span class="line">npm update modulename</span><br><span class="line">sudo npm install npm -g</span><br></pre></td></tr></table></figure><h3 id="npm-使用新资源库"><a href="#npm-使用新资源库" class="headerlink" title="npm 使用新资源库"></a>npm 使用新资源库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>以资源库安装</span><br><span class="line">npm --registry "http://npm.hacknodejs.com/" install underscore</span><br><span class="line"><span class="meta">#</span>默认资源库为淘宝</span><br><span class="line">npm config set registry "http://npm.taobao.org/"</span><br></pre></td></tr></table></figure><h3 id="Node-sass-安装失败解决方案"><a href="#Node-sass-安装失败解决方案" class="headerlink" title="Node-sass 安装失败解决方案"></a>Node-sass 安装失败解决方案</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>mac</span><br><span class="line">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass --save-dev</span><br></pre></td></tr></table></figure><h3 id="usr-bin-env-‘node’-No-such-file-or-directory"><a href="#usr-bin-env-‘node’-No-such-file-or-directory" class="headerlink" title="/usr/bin/env: ‘node’: No such file or directory"></a>/usr/bin/env: ‘node’: No such file or directory</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/bin/nodejs /usr/bin/node</span><br></pre></td></tr></table></figure><h2 id="node调试"><a href="#node调试" class="headerlink" title="node调试"></a>node调试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install supervisor -g   #安装</span><br><span class="line">supervisor index.js</span><br></pre></td></tr></table></figure><h2 id="node后台运行"><a href="#node后台运行" class="headerlink" title="node后台运行"></a>node后台运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup node app.js &gt; /foo/log.txt 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta">#</span>或者</span><br><span class="line">sudo npm install forever -g   #安装</span><br><span class="line">forever list</span><br><span class="line">forever start app.js</span><br><span class="line">forever stop app.js</span><br><span class="line">forever start -l forever.log -o out.log -e err.log app.js   #输出日志和错误</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nodejs&quot;&gt;&lt;a href=&quot;#nodejs&quot; class=&quot;headerlink&quot; title=&quot;nodejs&quot;&gt;&lt;/a&gt;nodejs&lt;/h2&gt;&lt;p&gt;node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用
      
    
    </summary>
    
      <category term="programm" scheme="http://www.farwmarth.com/categories/programm/"/>
    
    
      <category term="nodejs" scheme="http://www.farwmarth.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>read-the-docs托管学习笔记</title>
    <link href="http://www.farwmarth.com/readthedocs/"/>
    <id>http://www.farwmarth.com/readthedocs/</id>
    <published>2016-06-24T07:38:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h2><p><a href="http://sphinx-doc.org/" target="_blank" rel="noopener">Sphinx</a>是一个基于Python的文档生成项目,采用了<strong>reStructuredText</strong>作为文档写作语言 ,不过也可以通过模块支持其他格式.<br>(Sphinx标记结构)[<a href="http://www.pythondoc.com/sphinx/markup/]" target="_blank" rel="noopener">http://www.pythondoc.com/sphinx/markup/]</a></p><h3 id="Sphinx安装"><a href="#Sphinx安装" class="headerlink" title="Sphinx安装"></a>Sphinx安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install sphinx sphinx-autobuild</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>创建目录</span><br><span class="line">cd /path/to/project</span><br><span class="line">mkdir docs</span><br><span class="line"><span class="meta">#</span>sphinx工作目录基本配置</span><br><span class="line">cd docs</span><br><span class="line"><span class="meta">#</span>可以回车按默认配置来写</span><br><span class="line">sphinx-quickstart</span><br><span class="line"><span class="meta">#</span>quickstart 后生成的目录结构</span><br><span class="line">readthedocs</span><br><span class="line">│ make.bat</span><br><span class="line">│ Makefile</span><br><span class="line">├─build</span><br><span class="line">└─source</span><br><span class="line">　　│ conf.py</span><br><span class="line">　　│ index.rst</span><br><span class="line">　　├─_static</span><br><span class="line">　　└─_templates</span><br><span class="line"><span class="meta">#</span> 默认会有一个index.rst,make html用来生成html页面</span><br><span class="line">make html</span><br></pre></td></tr></table></figure><h3 id="添加一篇文章"><a href="#添加一篇文章" class="headerlink" title="添加一篇文章"></a>添加一篇文章</h3><p>在<code>source</code>目录下新建<code>hello.rst</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello,world</span><br><span class="line">======================================</span><br></pre></td></tr></table></figure></p><p>index.rst修改如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Contents:</span><br><span class="line"></span><br><span class="line">.. toctree::</span><br><span class="line">   :maxdepth: 2</span><br><span class="line"></span><br><span class="line">   hello</span><br></pre></td></tr></table></figure></p><p><code>make html</code>后效果如下:<br><img src="http://farwmarth.bestnewbee.com/images/sphinx.png" alt="sphinx"></p><p><code>toctree</code> 支持多级目录,有时候要区分同文件比如<code>python.rst</code>,<code>swift.rst</code>笔记在不同的目录,<code>toctree</code>这样设置:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Contents:</span><br><span class="line"></span><br><span class="line">.. toctree::</span><br><span class="line"></span><br><span class="line">   python/python</span><br><span class="line">   swift/swift</span><br></pre></td></tr></table></figure></p><h3 id="支持markdown编写"><a href="#支持markdown编写" class="headerlink" title="支持markdown编写"></a>支持markdown编写</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install recommonmark</span><br></pre></td></tr></table></figure><p>更改<strong>conf.py</strong>:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> recommonmark.parser <span class="keyword">import</span> CommonMarkParser</span><br><span class="line"></span><br><span class="line">source_parsers = &#123;</span><br><span class="line">    <span class="string">'.md'</span>: CommonMarkParser,</span><br><span class="line">&#125;</span><br><span class="line">source_suffix = [<span class="string">'.rst'</span>, <span class="string">'.md'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="更改主题-sphinx-rtd-theme"><a href="#更改主题-sphinx-rtd-theme" class="headerlink" title="更改主题 sphinx_rtd_theme"></a>更改主题 <a href="https://github.com/snide/sphinx_rtd_theme" target="_blank" rel="noopener">sphinx_rtd_theme</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install sphinx_rtd_theme</span><br></pre></td></tr></table></figure><p>更改<strong>conf.py</strong>:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sphinx_rtd_theme</span><br><span class="line"></span><br><span class="line">html_theme = <span class="string">"sphinx_rtd_theme"</span></span><br><span class="line"></span><br><span class="line">html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]</span><br></pre></td></tr></table></figure></p><h3 id="Github托管-read-the-docs发布"><a href="#Github托管-read-the-docs发布" class="headerlink" title="Github托管, read_the_docs发布"></a>Github托管, read_the_docs发布</h3><p><a href="https://read-the-docs.readthedocs.io/en/latest" target="_blank" rel="noopener">doc</a></p><ol><li>github上<code>push</code>用<code>sphinx-quickstart</code>生成的项目,<code>build</code>目录可以设置到.gitignore中</li><li>登录<a href="https://readthedocs.org/" target="_blank" rel="noopener">readthedocs</a>,注册账号,<code>Connected Services</code>中授权<code>github</code></li><li><a href="https://readthedocs.org/dashboard/" target="_blank" rel="noopener">dashboard</a>中<code>Import a Porject</code>导入<code>github</code>中的项目然后<code>build</code></li></ol><h3 id="Webhooks监听github提交"><a href="#Webhooks监听github提交" class="headerlink" title="Webhooks监听github提交"></a>Webhooks监听github提交</h3><ol><li>在文档项目的<code>setting</code>中选中<code>Webhooks &amp; Services</code>,</li><li>在<code>Services</code>项中点击<code>Add service</code></li><li>选择<code>ReadTheDocs</code>,点击<code>Active</code></li></ol><h3 id="make-nonlocal-image-URI-found-waring-gone"><a href="#make-nonlocal-image-URI-found-waring-gone" class="headerlink" title="make nonlocal image URI found waring gone"></a>make <code>nonlocal image URI found</code> waring gone</h3><p>更改<code>conf.py</code><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sphinx.environment</span><br><span class="line"><span class="keyword">from</span> docutils.utils <span class="keyword">import</span> get_source_line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_warn_node</span><span class="params">(self, msg, node, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg.startswith(<span class="string">'nonlocal image URI found:'</span>):</span><br><span class="line">        self._warnfunc(msg, <span class="string">'%s:%s'</span> % get_source_line(node), **kwargs)</span><br><span class="line"></span><br><span class="line">sphinx.environment.BuildEnvironment.warn_node = _warn_node</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sphinx&quot;&gt;&lt;a href=&quot;#Sphinx&quot; class=&quot;headerlink&quot; title=&quot;Sphinx&quot;&gt;&lt;/a&gt;Sphinx&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://sphinx-doc.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sphinx&lt;/a&gt;是一个基于Python的文档生成项目,采用了&lt;strong&gt;reStructuredText&lt;/strong&gt;作为文档写作语言 ,不过也可以通过模块支持其他格式.&lt;br&gt;(Sphinx标记结构)[&lt;a href=&quot;http://www.pythondoc.com/sphinx/markup/]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.pythondoc.com/sphinx/markup/]&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Sphinx安装&quot;&gt;&lt;a href=&quot;#Sphinx安装&quot; class=&quot;headerlink&quot; title=&quot;Sphinx安装&quot;&gt;&lt;/a&gt;Sphinx安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install sphinx sphinx-autobuild&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="sphinx github readthedoc" scheme="http://www.farwmarth.com/tags/sphinx-github-readthedoc/"/>
    
  </entry>
  
  <entry>
    <title>vsftpd使用</title>
    <link href="http://www.farwmarth.com/vsftpd/"/>
    <id>http://www.farwmarth.com/vsftpd/</id>
    <published>2016-05-17T06:09:25.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>vsftpd意思为“very secure FTP daemon(非常安全的FTP进程)”，是一个基于GPL发布的类UNIX类操作系统上运行的服务器的名字（是一种守护进程），可以运行在诸如Linux、BSD、Solaris、HP-UX以及Irix等系统上面。vsftpd支持很多其他传统的FTP服务器不支持的良好特性</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>安装</span><br><span class="line">yum install vsftpd</span><br><span class="line"><span class="meta">#</span>启动</span><br><span class="line">service vsftpd start</span><br><span class="line"><span class="meta">#</span>重启</span><br><span class="line">service vsfptd restart</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在<code>/etc/vsftpd</code>目录下的配置文件:</p><ul><li><code>vsfptd.conf</code>:主配置</li><li><code>ftpusers</code>:不允许登录的用户,不受任何配制项的影响</li><li><code>userlist_file</code>:<code>userlist_enable</code>和<code>userlist_deny</code>控制,这两个参数配置不同他可以是白名单也可以是黑名单.创建tom: 在user_list中,jim:不在user_list中测试配置关系<ul><li>Case 1: userlist_enable=YES, userlist_deny=YES<br>tom: 拒绝登入<br>jim: 允许登录</li><li>Case 2: userlist_enable=YES, userlist_deny=NO<br>tom: 允许登录<br>jim:拒绝登录（如user_list文件开头的注释所述，甚至不会提示输入密码，即无登入提示框，直接拒绝连接）</li><li>Case 3: userlist_enable=NO,userlist_deny=NO<br>tom: 允许登录<br>jim: 允许登录</li><li>Case 4: userlist_enable=NO,userlist_deny=YES<br>tom: 允许登录<br>jim: 允许登录</li><li>userlist_enable和userlist_deny两个选项联合起来针对的是：本地全体用户（除去ftpusers中的用户）和出现在user_list文件中的用户以及不在在user_list文件中的用户这三类用户集合进行的设置。</li><li>当且仅当userlist_enable=YES时：userlist_deny项的配置才有效，user_list文件才会被使用；当其为NO时，无论userlist_deny项为何值都是无效的，本地全体用户（除去ftpusers中的用户）都可以登入FTP</li><li>当userlist_enable=YES时，userlist_deny=YES时：user_list是一个黑名单，即：所有出现在名单中的用户都会被拒绝登入；</li><li>当userlist_enable=YES时，userlist_deny=NO时：user_list是一个白名单，即：只有出现在名单中的用户才会被准许登入(user_list之外的用户都被拒绝登入)；另外需要特别提醒的是：使用白名单后，匿名用户将无法登入！除非显式在user_list中加入一行：anonymous</li></ul></li></ul><h3 id="更改vsfptd-conf关键配置"><a href="#更改vsfptd-conf关键配置" class="headerlink" title="更改vsfptd.conf关键配置:"></a>更改vsfptd.conf关键配置:</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>接受匿名用户</span><br><span class="line">anonymous_enable=NO</span><br><span class="line"><span class="meta">#</span>若为YES,则userlist_file中的用户将不能登录,为NO则只有userlist_file的用户可以登录</span><br><span class="line">userlist_deny=NO</span><br><span class="line"><span class="meta">#</span>监听端口</span><br><span class="line">listen_port = 21</span><br><span class="line"><span class="meta">#</span>指定默认用户目录</span><br><span class="line">local_root=/var/www/html</span><br><span class="line"><span class="meta">#</span>指定系统用户只能访问其主目录</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=YES</span><br><span class="line"><span class="meta">#</span>匿名用户目录</span><br><span class="line">anon_root=/var/www/html</span><br></pre></td></tr></table></figure><h3 id="添加用户登录"><a href="#添加用户登录" class="headerlink" title="添加用户登录"></a>添加用户登录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>添加用户update主目录为/home/user_update</span><br><span class="line">useradd -d /home/user_update update -s /bin/bash</span><br><span class="line"><span class="meta">#</span>设置密码</span><br><span class="line">passwd update</span><br><span class="line"><span class="meta">#</span># 更改用户update的主目录为/update</span><br><span class="line">usermod -d /user_update update</span><br><span class="line"><span class="meta">#</span>在 `/etc/vsftpd/userlist_file` 中添加`update`用户</span><br><span class="line"><span class="meta">#</span>更改目录权限给update</span><br><span class="line">chown -R update client_update/</span><br><span class="line">chmod -R 755 目录</span><br></pre></td></tr></table></figure><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables status</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h3 id="cannot-change-directory-root"><a href="#cannot-change-directory-root" class="headerlink" title="cannot change directory:/root"></a>cannot change directory:/root</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>设置切换目录</span><br><span class="line">setsebool -P ftpd_disable_trans 1</span><br><span class="line"><span class="meta">#</span>设置ftp读写控制</span><br><span class="line">setsebool -P allow_ftpd_full_access 1</span><br><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure><h3 id="linux-vsftpd-550-create-directory-operation-failed"><a href="#linux-vsftpd-550-create-directory-operation-failed" class="headerlink" title="linux vsftpd 550 create directory operation failed"></a>linux vsftpd 550 create directory operation failed</h3><p>关闭SELinux方法<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></p><h4 id="如果用root登录"><a href="#如果用root登录" class="headerlink" title="如果用root登录"></a>如果用root登录</h4><ul><li>注释 <code>/etc/vsftpd/ftpusers</code> 中<code>root</code>用户</li><li>在 <code>/etc/vsftpd/userlist_file</code> 中添加<code>root</code>用户</li></ul><h2 id="配详解"><a href="#配详解" class="headerlink" title="配详解"></a>配详解</h2><p><a href="http://blog.sina.com.cn/s/blog_56ae1d580100yhel.html" target="_blank" rel="noopener">vsftpd.conf中文详解</a><br><code>/etc/vsftpd/vsftpd.conf</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#################用户选项###############</span><br><span class="line">接受匿名用户</span><br><span class="line">anonymous_enable=YES</span><br><span class="line"></span><br><span class="line">#匿名用户login时不询问口令</span><br><span class="line">no_anon_password=YES</span><br><span class="line"></span><br><span class="line">#匿名用户主目录</span><br><span class="line">anon_root=(none)</span><br><span class="line"></span><br><span class="line">#接受本地用户</span><br><span class="line">local_enable=YES</span><br><span class="line"></span><br><span class="line">#本地用户主目录</span><br><span class="line">local_root=(none)</span><br><span class="line"></span><br><span class="line">#如果匿名用户需要密码,那么使用banned_email_file里面的电子邮件地址的用户不能登录</span><br><span class="line">deny_email_enable=YES</span><br><span class="line"></span><br><span class="line">#仅在没有pam验证版本时有用,是否检查用户有一个有效的shell来登录</span><br><span class="line">check_shell=YES</span><br><span class="line"></span><br><span class="line">#若启用此选项,userlist_deny选项才被启动</span><br><span class="line">userlist_enable=YES</span><br><span class="line"></span><br><span class="line">#若为YES,则userlist_file中的用户将不能登录,为NO则只有userlist_file的用户可以登录</span><br><span class="line">userlist_deny=NO</span><br><span class="line"></span><br><span class="line">#如果和chroot_local_user一起开启,那么用户锁定的目录来自/etc/passwd每个用户指定的目录(这个不是很清楚,很哪位熟悉的指点一下)</span><br><span class="line">passwd_chroot_enable=NO</span><br><span class="line"></span><br><span class="line">#定义匿名登入的使用者名称。默认值为ftp。</span><br><span class="line">ftp_username=FTP</span><br><span class="line"></span><br><span class="line">#################用户权限控制###############</span><br><span class="line"></span><br><span class="line">#可以上传(全局控制).</span><br><span class="line">write_enable=YES</span><br><span class="line"></span><br><span class="line">#本地用户上传文件的umask</span><br><span class="line">local_umask=022</span><br><span class="line"></span><br><span class="line">#上传文件的权限配合umask使用</span><br><span class="line">#file_open_mode=0666</span><br><span class="line"></span><br><span class="line">#匿名用户可以上传</span><br><span class="line">anon_upload_enable=NO</span><br><span class="line"></span><br><span class="line">#匿名用户可以建目录</span><br><span class="line">anon_mkdir_write_enable=NO</span><br><span class="line"></span><br><span class="line">匿名用户其它的写权利(更改权限?)</span><br><span class="line">anon_other_write_enable=NO</span><br><span class="line"></span><br><span class="line">如果设为YES，匿名登入者会被允许下载可阅读的档案。默认值为YES。</span><br><span class="line">anon_world_readable_only=YES</span><br><span class="line"></span><br><span class="line">#如果开启,那么所有非匿名登陆的用户名都会被切换成guest_username指定的用户名</span><br><span class="line">#guest_enable=NO</span><br><span class="line"></span><br><span class="line">所有匿名上传的文件的所属用户将会被更改成chown_username</span><br><span class="line">chown_uploads=YES</span><br><span class="line"></span><br><span class="line">匿名上传文件所属用户名</span><br><span class="line">chown_username=lightwiter</span><br><span class="line"></span><br><span class="line">#如果启动这项功能，则所有列在chroot_list_file之中的使用者不能更改根目录</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"></span><br><span class="line">#允许使用\&quot;async ABOR\&quot;命令,一般不用,容易出问题</span><br><span class="line">async_abor_enable=YES</span><br><span class="line"></span><br><span class="line">管控是否可用ASCII 模式上传。默认值为NO。</span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line"></span><br><span class="line">#管控是否可用ASCII 模式下载。默认值为NO。</span><br><span class="line">ascii_download_enable=YES</span><br><span class="line"></span><br><span class="line">#这个选项必须指定一个空的数据夹且任何登入者都不能有写入的权限，当vsftpd 不需要file system 的权限时，就会将使用者限制在此数据夹中。默认值为/usr/share/empty</span><br><span class="line">secure_chroot_dir=/usr/share/empty</span><br><span class="line"></span><br><span class="line">###################超时设置##################</span><br><span class="line"></span><br><span class="line">#空闲连接超时</span><br><span class="line">idle_session_timeout=600</span><br><span class="line"></span><br><span class="line">#数据传输超时</span><br><span class="line">data_connection_timeout=120</span><br><span class="line"></span><br><span class="line">#PAVS请求超时</span><br><span class="line">ACCEPT_TIMEOUT=60</span><br><span class="line"></span><br><span class="line">#PROT模式连接超时</span><br><span class="line">connect_timeout=60</span><br><span class="line"></span><br><span class="line">################服务器功能选项###############</span><br><span class="line"></span><br><span class="line">#开启日记功能</span><br><span class="line">xferlog_enable=YES</span><br><span class="line"></span><br><span class="line">#使用标准格式</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line"></span><br><span class="line">#当xferlog_std_format关闭且本选项开启时,记录所有ftp请求和回复,当调试比较有用.</span><br><span class="line">#log_ftp_protocol=NO</span><br><span class="line"></span><br><span class="line">#允许使用pasv模式</span><br><span class="line">pasv_enable=YES</span><br><span class="line"></span><br><span class="line">#关闭安全检查,小心呀.</span><br><span class="line">#pasv_promiscuous+NO</span><br><span class="line"></span><br><span class="line">#允许使用port模式</span><br><span class="line">#port_enable=YES</span><br><span class="line"></span><br><span class="line">#关闭安全检查</span><br><span class="line">#prot_promiscuous</span><br><span class="line"></span><br><span class="line">#开启tcp_wrappers支持</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line">#定义PAM 所使用的名称，预设为vsftpd。</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line"></span><br><span class="line">#当服务器运行于最底层时使用的用户名</span><br><span class="line">nopriv_user=nobody</span><br><span class="line"></span><br><span class="line">#使vsftpd在pasv命令回复时跳转到指定的IP地址.(服务器联接跳转?)</span><br><span class="line">pasv_address=(none)</span><br><span class="line"></span><br><span class="line">#################服务器性能选项##############</span><br><span class="line"></span><br><span class="line">#是否能使用ls -R命令以防止浪费大量的服务器资源</span><br><span class="line">#ls_recurse_enable=YES</span><br><span class="line"></span><br><span class="line">#是否使用单进程模式</span><br><span class="line">#one_process_model</span><br><span class="line"></span><br><span class="line">#绑定到listen_port指定的端口,既然都绑定了也就是每时都开着的,就是那个什么standalone模式</span><br><span class="line">listen=YES</span><br><span class="line"></span><br><span class="line">#当使用者登入后使用ls -al 之类的指令查询该档案的管理权时，预设会出现拥有者的UID，而不是该档案拥有者的名称。若是希望出现拥有者的名称，则将此功能开启。</span><br><span class="line">text_userdb_names=NO</span><br><span class="line"></span><br><span class="line">#显示目录清单时是用本地时间还是GMT时间,可以通过mdtm命令来达到一样的效果</span><br><span class="line">use_localtime=NO</span><br><span class="line"></span><br><span class="line">#测试平台优化</span><br><span class="line">#use_sendfile=YES</span><br><span class="line"></span><br><span class="line">################信息类设置################</span><br><span class="line"></span><br><span class="line">#login时显示欢迎信息.如果设置了banner_file则此设置无效</span><br><span class="line">ftpd_banner=欢迎来到湖南三辰Fake-Ta FTP 网站.</span><br><span class="line"></span><br><span class="line">#允许为目录配置显示信息,显示每个目录下面的message_file文件的内容</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line"></span><br><span class="line">#显示会话状态信息,关!</span><br><span class="line">#setproctitle_enable=YES</span><br><span class="line"></span><br><span class="line">############## 文件定义 ##################</span><br><span class="line"></span><br><span class="line">#定义不能更改用户主目录的文件</span><br><span class="line">chroot_list_file=/etc/vsftpd/vsftpd.chroot_list</span><br><span class="line"></span><br><span class="line">#定义限制/允许用户登录的文件</span><br><span class="line">userlist_file=/etc/vsftpd/vsftpd.user_list</span><br><span class="line"></span><br><span class="line">#定义登录信息文件的位置</span><br><span class="line">banner_file=/etc/vsftpd/banner</span><br><span class="line"></span><br><span class="line">#禁止使用的匿名用户登陆时作为密码的电子邮件地址</span><br><span class="line">banned_email_file=/etc/vsftpd.banned_emails</span><br><span class="line"></span><br><span class="line">#日志文件位置</span><br><span class="line">xferlog_file=/var/log/vsftpd.log</span><br><span class="line"></span><br><span class="line">#目录信息文件</span><br><span class="line">message_file=.message</span><br><span class="line"></span><br><span class="line">############## 目录定义 #################</span><br><span class="line"></span><br><span class="line">#定义用户配置文件的目录</span><br><span class="line">user_config_dir=/etc/vsftpd/userconf</span><br><span class="line"></span><br><span class="line">#定义本地用户登陆的根目录,注意定义根目录可以是相对路径也可以是绝对路径.相对路径是针对用户家目录来说的.</span><br><span class="line">local_root=webdisk #此项设置每个用户登陆后其根目录为/home/username/webdisk</span><br><span class="line"></span><br><span class="line">#匿名用户登陆后的根目录</span><br><span class="line">anon_root=/var/ftp</span><br><span class="line"></span><br><span class="line">#############用户连接选项#################</span><br><span class="line"></span><br><span class="line">#可接受的最大client数目</span><br><span class="line">max_clients=100</span><br><span class="line"></span><br><span class="line">#每个ip的最大client数目</span><br><span class="line">max_per_ip=5</span><br><span class="line"></span><br><span class="line">#使用标准的20端口来连接ftp</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line"></span><br><span class="line">#绑定到某个IP,其它IP不能访问</span><br><span class="line">listen_address=192.168.0.2</span><br><span class="line"></span><br><span class="line">#绑定到某个端口</span><br><span class="line">#listen_port=2121</span><br><span class="line"></span><br><span class="line">#数据传输端口</span><br><span class="line">#ftp_data_port=2020</span><br><span class="line"></span><br><span class="line">#pasv连接模式时可以使用port 范围的上界，0 表示任意。默认值为0。</span><br><span class="line">pasv_max_port=0</span><br><span class="line"></span><br><span class="line">#pasv连接模式时可以使用port 范围的下界，0 表示任意。默认值为0。</span><br><span class="line">pasv_min_port=0</span><br><span class="line"></span><br><span class="line">##############数据传输选项#################</span><br><span class="line"></span><br><span class="line">#匿名用户的传输比率(b/s)</span><br><span class="line">anon_max_rate=51200</span><br><span class="line"></span><br><span class="line">#本地用户的传输比率(b/s)</span><br><span class="line">local_max_rate=5120000</span><br></pre></td></tr></table></figure></p><p><a href="http://desert3.iteye.com/blog/1685734" target="_blank" rel="noopener">http://desert3.iteye.com/blog/1685734</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;vsftpd意思为“very secure FTP daemon(非常安全的FTP进程)”，是一个基于GPL发布的类UNIX类操作系统上运行的服务器的名字（是一种守护进程），可以运行在诸如Linux、BSD、Solaris、HP-UX以及Irix等系统上面。vsftpd支持很多其他传统的FTP服务器不支持的良好特性&lt;/p&gt;
&lt;h3 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install vsftpd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service vsftpd start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;重启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service vsfptd restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vsftpd" scheme="http://www.farwmarth.com/tags/vsftpd/"/>
    
  </entry>
  
  <entry>
    <title>脚本自动化手册</title>
    <link href="http://www.farwmarth.com/%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%8B%E5%86%8C/"/>
    <id>http://www.farwmarth.com/脚本自动化手册/</id>
    <published>2016-05-12T01:42:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步文件"><a href="#同步文件" class="headerlink" title="同步文件"></a>同步文件</h2><h3 id="rsync-remote-synchronize"><a href="#rsync-remote-synchronize" class="headerlink" title="rsync(remote synchronize)"></a>rsync(remote synchronize)</h3><p>实现远程同步功能的软件,它在同步文件的同时,可以保持原来文件的权限、时间、软硬链接等附加信息.</p><h4 id="rsync认证方式"><a href="#rsync认证方式" class="headerlink" title="rsync认证方式"></a>rsync认证方式</h4><p>rsync有两种常用的认证方式，一种是<code>rsync-daemon</code>方式，另外一种是ssh方式。在平时使用过程，我们使用最多的是<code>rsync-daemon</code>方式</p><h4 id="rsync服务器架设"><a href="#rsync服务器架设" class="headerlink" title="rsync服务器架设"></a>rsync服务器架设</h4><p>rsync的主要有以下三个配置文件<code>rsyncd.conf</code>(主配置文件)、<code>rsyncd.secrets</code>(密码文件)、<code>rsyncd.motd</code>(rysnc服务器信息)</p><a id="more"></a><ul><li>rsyncd.conf</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>从远程机器同步文件到本机</span><br><span class="line">/usr/bin/rsync -rlptDvzHS --port=1111 --password-file=/etc/xx.password root@1.1.1.1::xx/bin/logic/   /data/xx/bin/logic/</span><br><span class="line"><span class="meta">#</span>本机目录同步,--delete-excluded:目标目录中存在在源目录不存在删除,并且如果 --exclude指定的也会删除</span><br><span class="line">rsync --delete-excluded -avzp --exclude=3rd  target/ des/</span><br></pre></td></tr></table></figure><h3 id="scp-复制rsa密钥到远程主机"><a href="#scp-复制rsa密钥到远程主机" class="headerlink" title="scp 复制rsa密钥到远程主机"></a>scp 复制rsa密钥到远程主机</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp  C:\Users\Administrator\.ssh\vps_Identity.pub user@example.com:/home/user/.ssh/vps_far.pub</span><br></pre></td></tr></table></figure><h3 id="lrzsz-便携的ssh上传下载工具"><a href="#lrzsz-便携的ssh上传下载工具" class="headerlink" title="lrzsz 便携的ssh上传下载工具"></a>lrzsz 便携的ssh上传下载工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install lrzsz</span><br><span class="line"><span class="meta">#</span>从服务器下载</span><br><span class="line">sz download.txt</span><br><span class="line"><span class="meta">#</span>从本机选择文件上传</span><br><span class="line">rz</span><br></pre></td></tr></table></figure><h2 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h2><h3 id="haozip"><a href="#haozip" class="headerlink" title="haozip"></a>haozip</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files\HaoZip\HaoZipC.exe&quot; a -tzip crt.zip C:\Users\Administrator.PC-20150720QKHJ\AppData\Roaming\VanDyke\Config\*</span><br></pre></td></tr></table></figure><h3 id="tar-压缩"><a href="#tar-压缩" class="headerlink" title="tar 压缩"></a>tar 压缩</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zcvf $PackFile $Project &gt; /dev/null</span><br></pre></td></tr></table></figure><h2 id="linux-切割文件"><a href="#linux-切割文件" class="headerlink" title="linux 切割文件"></a>linux 切割文件</h2><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>按文件大小切割</span><br><span class="line">split  -b 10m yybao_s1.out  yybao_s1_</span><br><span class="line"><span class="meta">#</span>按文件行数切割</span><br><span class="line">split -l 100 test.txt</span><br></pre></td></tr></table></figure><h3 id="logrotate"><a href="#logrotate" class="headerlink" title="logrotate"></a>logrotate</h3><p>强制执行某个日志的切,如<code>log.config</code>是在<code>/etc/logrotate.d</code>下文件的文件名<code>logrotate -f  log.config</code></p><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opt/clps_tomcat/logs/catalina.out #要切割的日志</span><br><span class="line">&#123;</span><br><span class="line">daily  #每日执行</span><br><span class="line">dateext #切换后的日志文件会附加上一个短横线和YYYYMMDD格式的日期</span><br><span class="line">copytruncate #复制日志后会清空在数据</span><br><span class="line">nocompress   ##不压缩</span><br><span class="line">rotate 15   ##保留15次ratate日志</span><br><span class="line"><span class="meta">#</span>size=5MB # k,MB(M),GB(G)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mac-下-logrotate-安装"><a href="#mac-下-logrotate-安装" class="headerlink" title="mac 下 logrotate 安装"></a>mac 下 logrotate 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>执行</span><br><span class="line">brew install logrotate</span><br><span class="line"><span class="meta">#</span>.zshrc</span><br><span class="line">export LOGROTATE_HOME=/usr/local/Cellar/logrotate/3.9.1/sbin</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;LOGROTATE_HOME&#125;</span><br></pre></td></tr></table></figure><h4 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">”/data/yxiii/bin/logs/*.out“</span><br><span class="line">&#123;</span><br><span class="line">size 10m</span><br><span class="line">dateext</span><br><span class="line">copytruncate</span><br><span class="line">nocompress</span><br><span class="line">rotate 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="linux-定时任务"><a href="#linux-定时任务" class="headerlink" title="linux  定时任务"></a>linux  定时任务</h2><h3 id="at-命令"><a href="#at-命令" class="headerlink" title="at 命令"></a>at 命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>明天四点执行shell.sh中的命令</span><br><span class="line">at -f shell.sh 4 am tomorrow</span><br><span class="line">at -f /home/far/Develop/heros/code/server/trunk/bin/stop.sh  4:00 tomorrow</span><br><span class="line"><span class="meta">#</span>查看指定任务</span><br><span class="line">at -c 8</span><br><span class="line"><span class="meta">#</span>查看列表</span><br><span class="line">atq</span><br><span class="line"><span class="meta">#</span>删除指定任务</span><br><span class="line">atrm 1</span><br></pre></td></tr></table></figure><h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><h4 id="crontab脚本目录"><a href="#crontab脚本目录" class="headerlink" title="crontab脚本目录"></a>crontab脚本目录</h4><ul><li><code>/etc/crontab</code>: 这个文件负责安排由系统管理员制定的维护系统以及其他任务的crontab</li><li><code>/etc/cron.d/</code>: 这个目录用来存放任何要执行的crontab文件或脚本</li><li><code>/var/spool/cron/far</code>: 这个目录下存放的是每个用户（包括root）的crontab任务</li></ul><h4 id="crontab-服务查看"><a href="#crontab-服务查看" class="headerlink" title="crontab 服务查看"></a>crontab 服务查看</h4><ul><li>启动服务: <code>/sbin/service crond start</code></li><li>关闭服务:<code>/sbin/service crond stop</code></li><li>重启服务: <code>/sbin/service crond restart</code></li><li>重新载入配置: <code>/sbin/service crond reload</code></li><li>查看服务状态: <code>/sbin/service crond status</code></li></ul><h4 id="crontab-选项"><a href="#crontab-选项" class="headerlink" title="crontab  选项"></a>crontab  选项</h4><ul><li><p>概要</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab [ -u user ] file</span><br><span class="line">crontab [ -u user ] [ -i ] &#123; -e | -l | -r &#125;</span><br></pre></td></tr></table></figure></li><li><p>-l:在控制台输出计划执行结果</p></li><li>-r :移除指定的文件计划</li><li>-e 编辑crontab默认配置文件</li><li>-i : -r移除之前加上确认</li><li>验证是否已删除 crontab 文件: <code>ls /var/spool/cron/crontabs</code></li></ul><h4 id="基本配置-1"><a href="#基本配置-1" class="headerlink" title="基本配置"></a>基本配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line">HOME=/</span><br><span class="line"><span class="meta">#</span> .---------------- minute (0 - 59)</span><br><span class="line"><span class="meta">#</span> |  .------------- hour (0 - 23)</span><br><span class="line"><span class="meta">#</span> |  |  .---------- day of month (1 - 31)</span><br><span class="line"><span class="meta">#</span> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"><span class="meta">#</span> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7)  OR</span><br><span class="line"><span class="meta">#</span>sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"><span class="meta">#</span> |  |  |  |  |</span><br><span class="line"><span class="meta">#</span> *  *  *  *  *  command to be executed</span><br><span class="line">0 4 8 5 *  /Users/far/Develop/workdir/heros_codingnet/bin/stop.sh</span><br><span class="line">43 23 7 5 *  /Users/far/Develop/workdir/heros_codingnet/bin/stop.sh</span><br><span class="line">59 23 12 * * /bin/bash /root/stop_games.sh all</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="自动打包文件备份到指定目录"><a href="#自动打包文件备份到指定目录" class="headerlink" title="自动打包文件备份到指定目录"></a>自动打包文件备份到指定目录</h3><p>把<code>/data</code>下文件打包备份到<code>/data/backup</code>下以天为文件名,并清除七天以前的备份`<br>增加计划任务<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export EDITOR=vi</span><br><span class="line">crontab -e</span><br><span class="line">0 0 * * * /data/bak.sh;</span><br></pre></td></tr></table></figure></p><p>bak.sh文件内容如下:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">logs_dir=/data</span><br><span class="line">bak_dir=/data/backup</span><br><span class="line">bak_file=bak_`date +%Y%m%d`</span><br><span class="line">echo "begining of tar"</span><br><span class="line">tar zcf $bak_dir/$bak_file.gz  $logs_dir/*.*</span><br><span class="line">echo "clearing file.log"</span><br><span class="line">find $bak_dir -mtime +7 -exec rm -rf &#123;&#125; \;</span><br><span class="line"><span class="meta">#</span>end</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;同步文件&quot;&gt;&lt;a href=&quot;#同步文件&quot; class=&quot;headerlink&quot; title=&quot;同步文件&quot;&gt;&lt;/a&gt;同步文件&lt;/h2&gt;&lt;h3 id=&quot;rsync-remote-synchronize&quot;&gt;&lt;a href=&quot;#rsync-remote-synchronize&quot; class=&quot;headerlink&quot; title=&quot;rsync(remote synchronize)&quot;&gt;&lt;/a&gt;rsync(remote synchronize)&lt;/h3&gt;&lt;p&gt;实现远程同步功能的软件,它在同步文件的同时,可以保持原来文件的权限、时间、软硬链接等附加信息.&lt;/p&gt;
&lt;h4 id=&quot;rsync认证方式&quot;&gt;&lt;a href=&quot;#rsync认证方式&quot; class=&quot;headerlink&quot; title=&quot;rsync认证方式&quot;&gt;&lt;/a&gt;rsync认证方式&lt;/h4&gt;&lt;p&gt;rsync有两种常用的认证方式，一种是&lt;code&gt;rsync-daemon&lt;/code&gt;方式，另外一种是ssh方式。在平时使用过程，我们使用最多的是&lt;code&gt;rsync-daemon&lt;/code&gt;方式&lt;/p&gt;
&lt;h4 id=&quot;rsync服务器架设&quot;&gt;&lt;a href=&quot;#rsync服务器架设&quot; class=&quot;headerlink&quot; title=&quot;rsync服务器架设&quot;&gt;&lt;/a&gt;rsync服务器架设&lt;/h4&gt;&lt;p&gt;rsync的主要有以下三个配置文件&lt;code&gt;rsyncd.conf&lt;/code&gt;(主配置文件)、&lt;code&gt;rsyncd.secrets&lt;/code&gt;(密码文件)、&lt;code&gt;rsyncd.motd&lt;/code&gt;(rysnc服务器信息)&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://www.farwmarth.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>驾考</title>
    <link href="http://www.farwmarth.com/%E9%A9%BE%E8%80%83%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://www.farwmarth.com/驾考知识点/</id>
    <published>2016-05-11T11:10:39.000Z</published>
    <updated>2017-11-16T09:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报考"><a href="#报考" class="headerlink" title="报考"></a>报考</h2><p>驾照这个事情其实被搁置了很久,一来人太懒,再者觉得边上班还要请假练车是件比较让人头痛的事情,年初的时候被催着把这报名的事情给完成了,报名之前听说广州报个名,拿到证一年多是家常便饭,主要是排队时间太长了.</p><p>报考前也逛了一下附近的驾校,知乎上,贴吧上一些帖子也琢磨了下,一般驾校分快慢班,快班的意思就是广州练车可能就到湖南去考试,快班自然价格要贵一些，包括了长途的交通费用，还有一个就是手动档和自动档,一般都学习手动档,学费便宜一些,另外可以驾驶自动档的车型。<br><a id="more"></a></p><p>斟酌之后还是直接在帖吧里找了一个教练的qq,电话聊了一下觉得这个教练不错,简单约定了一下就把其他四个同事也拉过来报名了。把教练而不直接在驾校报名或者像猪兼强那种平台的原因是:最终都练车和时间分配的都是教练把握,不经过第三方中转价格也更透明一些。有的驾校场地比较小,虽然离得近但是练车时间太少了通过率不高。</p><h2 id="科目一"><a href="#科目一" class="headerlink" title="科目一"></a>科目一</h2><p>3月份报的名,然后交了一部分定金,科目一考完后才把全额交完.<br>科目一的考试感觉就像是回到了小学时代.在考试前把一千多道题用&lt;&lt;驾考宝典&gt;&gt;<br>整个过一遍,然后针对自己把易错的题再捊一遍就差不多了。考试题目是一百道,及格是九十分,我列了一下科目一一些考试题:</p><pre><code>#### 手势题学员所看到的交警手势都是镜面动作,不要考虑站在交警的角度上看动作.速记口决:左手过头勿前行，右手摆动靠边停。两手平伸右手摆，警察叔叔让直行。掌心向前你别动，哪手摆动向哪行。左手侧摆须待转，右手横摆道变更。变道安全很重要，右手下摆是慢行#### 易错点+ 拿到驾照后实习期为一年12个月+ 无中线,城三公四,同一向道,城五公七.+ 高速二车道:100,60,三车道110,90,60,最高120，最低60+ 虚线可以变道,实线无法变+ 转弯的机动车让直行车辆先行，右方道路来车先行，右转弯车让左转弯车先行.+ 白色菱形是人行道预警,要减速+ 夜间有前车时要超车,远近灯变换是提醒前车,左转向灯是提示后车我要超车+ 重新驾驶证:瞒1吊2贿赂撤3醉5逃终生+ 逃前人死3-7年，逃后人死7年以上，其余均为3年 闰+ 行驶的标志是用圆圈表示，而停车位是用矩形+ 酒驾20醉驾扣12分，醉驾80,约束至酒醒,五年内不得重新取得机动车驾驶证+ 黄灯前轮过线可通行,红灯,整车过线才可通行.黄灯闪烁瞭望确认无行人后通过+ 分离式路基公路左、右行车道分开修建的公路，包括中央分隔带不等宽的和左、右两侧行车道不等高的公路+ 有虚线的是紧急停车带,无的是错车道+ 高速公路字体黄色最高速度，黑色建议速度，白色最低速度+ 白色虚线，可跨越同向车道中心线，黄色虚线，指示标志，可超车掉头。+ 白色虚线和三角地带标组成标线:左入口右出口+ 箭头尾巴有弯折的是转弯，尾巴是弧线的是变道+ 机动车匝道驶入高速公路，开启左转向灯，进入减速车道开启右转向灯+ 发生故障时，高速在来车方向150以外设置警告标志，非高速50-100米，要开启危险报警闪光灯+ 不得连续驾驶4小时以上，休息20分钟+ 初得驾驶证有效期为6年，再是10年，长期+ 科目二三考试预约次数不得超过5次+ 准考证明的有效期是3年+ 申请驾驶证。汽车18-70岁，三轮车18-60岁+ 驾驶证过期后90日内换证，信息变更30日内，防撞带不需要信息变更+ 驶入左转向灯，驶出右转向灯</code></pre><h2 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a>科目二</h2><p>因为新平台运营的关系考试科目一通过后十天就可以预约科目二，这样节省了不少时间,刚开始对科目二挺没底的,因为以前只操作过两轮自行车….，练车大概流程是这样的：</p><p>第一天:转模拟方向盘,对于经常玩赛车游戏的同学来说是小菜一碟,练习打火,踩离合,挂挡,刹车,然后教练会带着你兜几圈熟悉一下开车的感觉。</p><p>第二天:练习倒车入库,为了应付考试教练一般都会有参考物,到固定参考点时转动方向盘,如果想提高容错率,前提是控制好离合让车速保持稳定,科目二都是在一档模式,转弯时会因为阻力变大要放部分离合保持速度.个人感觉最难把握的不是离合,而是入库时车身偏移时的方向修正。反正就是要反复练习,即使被教练骂得狗血淋头…</p><p>第三天:就进入其他项练习了，上坡定点，侧方停车，曲线行驶和直角转弯,这里面没啥难点,主要是定点的时候参照物不好照,考场的车座位和参照物可能不一样,不过没太大影响，误差不太大只是扣分而已.还有就是直角转弯的时候要把握后转弯的时间点，这个也是有参考物的。</p><p>放上知乎大神们的原理剖析图,只做参考,最终还是按自己教练方法来,有时候看得方法一多脑子容易弄混.<br><a href="https://www.zhihu.com/question/24518251" target="_blank" rel="noopener">https://www.zhihu.com/question/24518251</a></p><p>下面是科目二的一些摘录:</p><pre><code>### 离合踩到底时整腿跟进,从底返回时腿跟着往外移动一段距离,然后用脚跟作支撑点成角度压住离合.离合是提供动力是一个缓慢的过程:不要幅度过大.非空档时一定不要松离合.踩车未松开,不要将离合松到最大。###  刹车在要定点停车时，踩车脚要提前准备，速度过快也可以轻踏刹车来减速。### 档位换档和归空档都要将刹车踩到底换档前养成好习惯:先归空档,踩离合的左脚先松开调整位置再踩下去。再换档。### 方向盘记住转过去多少回转多少### 上下车顺序:上车:系安全带---&gt;调整座位----&gt;点火---&gt;离合归空档调到1档---&gt;拉起手刹---&gt;轻松离合缓慢起步下车:归空档----&gt;拉手刹---&gt;熄火### 倒车入库#### 倒车入库顺序右边起点倒入库----&gt;调整车身左转弯----&gt;左边入库-----&gt;右转弯开回右起点#### 右起点入库挂后退档,1档起步,观察左视镜下边缘-----&gt;左视镜下边缘盖过起点黄线时方向盘向右打死(一圏半到时钟3点)-----&gt;观察右视镜后方,先看到库左边线,当车尾与左顶角接触时将方向盘回拉四分之一圈(时钟12点方向)----&gt;继续观察右视镜倒退后左库被盖过,此后只能看到右库边----&gt;右库边与车身有三十公分左右间隙时宽度正合适,转过头观察左视镜注意左边车身与左库边----&gt;当左库边出现在视野里时继续倒退----&gt;当整条左库边线即将出现在视野时将方向盘回拉至九点方向再回转一圏(其实就是起点时转了一圈半后回拉一圈半)-----&gt;观察左视镜与左库入口的黄线,下边缘刚盖过黄线时刹车归空档。#### 左转弯如果车身在右入库后有倾斜起步时踩低离合微调车身挂前起1档-----&gt;直行时当我们自己的肩刚过左库入口边线时立即身左打方向盘1圈四分之一(逆时针12点方向)------&gt;一直保持方向盘转弯到左侧虚线处,这个位置用眼镜观察左视镜下边缘过黄虚线大约两三个手指的视角踩车停止-----&gt;归空档重踩左离合脚挂后退档，放刹车轻放离合后退-----&gt;保持方向盘12点方向不动后退，观察右视镜,右后车轮中央踩上右库直边线时(如果不好理解就是想象将直边延长至车身处与右后胎中央相交)身左四分之一方向盘(即左边打满9点方向)------&gt;转头观察左视镜,左库边将要全部出现在视野时方向盘回正(右转一圈半)----&gt;后面的过程与右入库相同(观察左视镜与左库入口的黄线,下边缘刚盖过黄线时刹车归空档。)#### 开回起点1档起步压低离合-----&gt;直行当车盖边边缘即将盖住道路实虚线时快速方向盘向(右边一圈半)-----&gt;转变时不松一点离合不要让车身停止前进-----&gt;要转完变时离合压低防止冲得太快来不及回调方向----&gt;直视远方当车身与道路线平行时快速(左边一圈半)方向盘回位----&gt;观察左视镜与起点黄虚线距离过两手指时刹车空档------&gt;拉起手刹---&gt;熄火下车。####  偏差修正看视镜车尾与库边的距离,哪边宽方向盘往哪边打,修正幅度在45到90度内,太小轮胎转动过小### 坡道定点停车开至停车待上坡区------&gt;轻松离合上坡(保证足够的动力不要上到一半车身间停)-----&gt;眼睛瞄准调整车盘与右道路边线的轻微贴合观察水管与车内空调右角角度------&gt;到个人估算角度时(矮一点的人是三点一线，高的人可能要过一点水管)同时刹车和离合-------&gt;数5秒不要松开踩车,轻放离合直到车身震动有足够动力一二秒,保持这个离合位置------&gt;轻松刹车上坡到坡顶------&gt;下坡时离合踩到底刹车踩一半让车身保持惯性前行,不要忘记打方向盘转弯,如果方向盘没有即时转过来再下压点刹车降速------&gt;到平地时先松踩车,方向盘转回,轻放离合(和平地起步一样)### 侧方停车开到虚线侧方停车前先观察前方的车辆是否已侧方完成------&gt;开到侧方起点虚线处(角度也是左视镜下边缘与虚线二三手指)-----&gt;归档后退档,后退起步当左视镜下边缘刚盖过虚线时方向盘(向右一周)---&gt;继续后退观察右视镜,当车身右车尾与库顶点还有一点角度时(顶点快要出现在视野)方向盘(左转一圈)----&gt;后退让后车轮中央正好踩在中央的虚线上立即将方向盘向左打满(一圈半9点方向)----&gt;压低离合准备刹车脚,立即看前方的车盖左缝隙与边库虚线距离,当左缝隙刚过虚线内边缘时立刻刹车-----&gt;归空档挂前进1档保持方向盘左满一直走,当左车角刚要接近道路边线方向盘回位(右一圈半)-----&gt;(这时要踩低离合因为要转两圈边方向盘盘)当车盖圆盘接近道路线时方向盘(右一圈)-----&gt;车身平时(左打回一圈)### 曲线行驶 直角转弯曲线行驶:倒八字走法,进曲线时先打一圈一直走然后车头跟着弯道线走，边走边转动方向盘。回拐脚处方向盘回位车头跟着弯道线走。直角转弯:车盖圆盘视角贴着边线内边缘,车盖将要盖到黄线时将方向一边打满(一圈半),车身直了回位一圈半.</code></pre><h3 id="长途考"><a href="#长途考" class="headerlink" title="长途考"></a>长途考</h3><p>长途考是广东省比较特殊的地方。权当一次短途旅行就好.大概是四人一车,每人开四十公里,沿途风景如画,速度跑起来要注意是的是方向盘微动就可以了.<br>我们去的是一个叫连南的县城,属于少数民族占比较多的地方,附近的小店里有瑶族的特色服装，吃了吃清远鸡,买了买茶,并没有传说中的大保健。</p><h2 id="科目三"><a href="#科目三" class="headerlink" title="科目三"></a>科目三</h2><p>考试步骤倒是挺简单的,主要是细节比较多,要多练习形成肌肉反应,还有就是科目三的考场路况和路线都不尽相同,像化南和化东车辆比较少,考试毫无压力,路况对于新手来说大大增加了难度系数。科目三算是我最最悲剧的地方,居然挂在灯光上，还没起步。扭了两下灯光扭不动就跪了.</p><p>科目三考试可能有两种车型，传奇和捷达,所以考试前一般都会花一百五买钟练习一下传奇车型提升下成功率。传奇和捷达有几个地方不一样,第一是挂档可能要更向内侧用力。第二是手刹位置。第三是灯光。</p><p>下面是科目三不同考场的线路和操作摘录:</p><pre><code>### 华观路下坡路，带刹车起步防止溜车（松一段离合，松完刹车）。一挡起步，左转下坡路（观察左方车辆），右转，最优左边第二条道（不要走第一四道），上二档，前方公交站后(变到最左边车道，在考试变更车道前变到最左边)，请变更车道(变最左)，直线通过路口（红绿灯🚥），超车（如果在最左道不用管请保持直线行驶），环岛掉头（左灯，车多换一挡注意环岛左边的车流），掉头快完成时水盖处右灯，选择左边第二条道(有点弯向右打点方向)，通过学校，通过人行道（红绿灯🚥）后（提前左灯，斑马线处开始变更左车道上二档），加减档（60时速标志处开始松油门），会车（红绿灯🚥），直线行驶，终点。### 化南绕车一圈检查（离车身30公分左右），上车准备，起步(追线右侧30公分)，（左转灯，喇叭，镜子，一挡，手刹），三秒右灯！！！，靠边停车（空挡手刹），再起步，（左转灯，喇叭，镜子，一挡，手刹），上二档，会车（左右看），加减档（先减到一挡，再升到二档，离合不要松太慢导致与提示不符），（变更右车道）右转弯，左边第二道。变更左车道（左灯，打灯反应时间五秒内），掉头（桥上减到一挡，左灯），直线行驶（匀加速到35左右，没特殊情况不减速，直线方向盘不要大幅度动），保持直线行驶，左转弯，靠边停车考试结束### 化东起步，一挡右转，右边第二条道，换二档，超车(左超)，返回原车道（只要打右灯），直行通过路口，变更左车道，前方掉头（1档），掉头后换二档，前方人行道，过路口加减档，60时速牌（没有前方加减档语音），会车，变更左车道，二档沿中线掉头（方向一圈），左边第二条道，直线行驶，变更车道（左）。靠边停车### 其他注意点+ 会车，人行道，学校，公交站，车速过30的话松油门，左右看+ 离合脚松完拿下来，油门脚不加油时脚尖松开+ 停车一挡起步#### 灯光两格近光，远光，跟车行驶(近光)，远光，交替灯光（远光打到近光再向上拨动），警示灯，关所有灯光(警示灯，近光灯)。灯光还要注意一点就是传奇车型和捷达的开关不一样。</code></pre><h2 id="科目四"><a href="#科目四" class="headerlink" title="科目四"></a>科目四</h2><p>科目三考完之后三天后就可以约考科目四了<br>科目四和科目一雷同，都是一个背题的过程。题目比科目一要少,只有50道,而题型除了单选和判断还增加了多选题。</p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>8月份终于是拿到了,在广州来说算是快的,比较幸运的是这段时期新平台试运营,新平台上报考排队的人不是太多。回顾这几个月的过程,无论是练车时的专注度也好,上下班回来那么多趟也好.把一件事情完结总是有种大圆满的喜悦感。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;报考&quot;&gt;&lt;a href=&quot;#报考&quot; class=&quot;headerlink&quot; title=&quot;报考&quot;&gt;&lt;/a&gt;报考&lt;/h2&gt;&lt;p&gt;驾照这个事情其实被搁置了很久,一来人太懒,再者觉得边上班还要请假练车是件比较让人头痛的事情,年初的时候被催着把这报名的事情给完成了,报名之前听说广州报个名,拿到证一年多是家常便饭,主要是排队时间太长了.&lt;/p&gt;
&lt;p&gt;报考前也逛了一下附近的驾校,知乎上,贴吧上一些帖子也琢磨了下,一般驾校分快慢班,快班的意思就是广州练车可能就到湖南去考试,快班自然价格要贵一些，包括了长途的交通费用，还有一个就是手动档和自动档,一般都学习手动档,学费便宜一些,另外可以驾驶自动档的车型。&lt;br&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://www.farwmarth.com/tags/life/"/>
    
      <category term="driver" scheme="http://www.farwmarth.com/tags/driver/"/>
    
  </entry>
  
</feed>
